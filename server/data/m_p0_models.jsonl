{"downloads": 86100, "id": "bigscience/bloom", "likes": 2988, "pipeline_tag": "text-generation", "task": "text-generation", "meta": {"license": "bigscience-bloom-rail-1.0", "language": ["ak", "ar", "as", "bm", "bn", "ca", "code", "en", "es", "eu", "fon", "fr", "gu", "hi", "id", "ig", "ki", "kn", "lg", "ln", "ml", "mr", "ne", "nso", "ny", "or", "pa", "pt", "rn", "rw", "sn", "st", "sw", "ta", "te", "tn", "ts", "tum", "tw", "ur", "vi", "wo", "xh", "yo", "zh", "zu"], "programming_language": ["C", "C++", "C#", "Go", "Java", "JavaScript", "Lua", "PHP", "Python", "Ruby", "Rust", "Scala", "TypeScript"], "pipeline_tag": "text-generation", "widget": [{"text": "A \"whatpu\" is a small, furry animal native to Tanzania. An example of a sentence that uses the word whatpu is: We were traveling in Africa and we saw these very cute whatpus. | To do a \"farduddle\" means to jump up and down really fast. An example of a sentence that uses the word farduddle is:", "example_title": "Imaginary word", "group": "English"}, {"text": "Un \"whatpu\" est un petit animal \u00e0 fourrure originaire de Tanzanie. Un exemple de phrase qui utilise le mot whatpu est: Nous \u00e9tions en Afrique et nous avons vu des whatpus trop mignons. Faire un \"farduddle\" veut dire sauter sur place vraiment vite. Un exemple de phrase qui utilise le mot farduddle est:", "example_title": "Imaginary word", "group": "French"}, {"text": "Un \"whatpu\" es un peque\u00f1o animal peludo nativo de Tanzania. Un ejemplo de una oraci\u00f3n que usa la palabra whatpu es: Est\u00e1bamos viajando por \u00c1frica y vimos estos whatpus muy bonitos. Hacer un \"farduddle\" significa saltar arriba y abajo muy r\u00e1pido. Un ejemplo de una oraci\u00f3n que usa la palabra farduddle es:", "example_title": "Imaginary word", "group": "Spanish"}, {"text": " \u0627\u0644\"\u0648\u0627\u062a\u0628\u0648\" \u0647\u0648 \u062d\u064a\u0648\u0627\u0646 \u0635\u063a\u064a\u0631 \u0645\u0643\u0633\u0648 \u0628\u0627\u0644\u0641\u0631\u0627\u0621 \u064a\u0639\u064a\u0634 \u0641\u064a \u062a\u0646\u0632\u0627\u0646\u064a\u0627. \u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u062c\u0645\u0644\u0629 \u062a\u0633\u062a\u062e\u062f\u0645 \u0643\u0644\u0645\u0629 \u0648\u0627\u062a\u0628\u0648 \u0647\u064a: \u0643\u0646\u0627 \u0646\u0633\u0627\u0641\u0631 \u0641\u064a \u0627\u0641\u0631\u064a\u0642\u064a\u0627 \u0648 \u0631\u0623\u064a\u0646\u0627 \u0647\u0624\u0644\u0627\u0621 \u0627\u0644\u0648\u0627\u062a\u0628\u0648 \u0627\u0644\u0644\u0637\u0641\u0627\u0621. \u0644\u0644\u0642\u064a\u0627\u0645 \u0628\"\u0641\u0627\u0631\u062f\u0627\u062f\u0644\" \u064a\u0639\u0646\u064a \u0627\u0646 \u062a\u0642\u0641\u0632 \u0644\u0644\u0623\u0639\u0644\u0649 \u0648 \u0627\u0644\u0623\u0633\u0641\u0644 \u0628\u0633\u0631\u0639\u0629 \u0643\u0628\u064a\u0631\u0629. \u0645\u062b\u0627\u0644 \u0639\u0644\u0649 \u062c\u0645\u0644\u0629 \u062a\u0633\u062a\u062e\u062f\u0645 \u0643\u0644\u0645\u0629 \u0641\u0627\u0631\u062f\u0627\u062f\u0644 \u0647\u064a:", "example_title": "Imaginary word", "group": "Arabic"}, {"text": "Um \"whatpu\" \u00e9 um pequeno animal peludo nativo da Tanz\u00e2nia. Um exemplo de uma frase que usa a palavra whatpu \u00e9: Est\u00e1vamos a viajar por \u00c1frica e vimos uns whatpus muito queridos. Fazer um \"farduddle\" significa saltar para cima e para baixo muito r\u00e1pido. Um exemplo de uma frase que usa a palavra farduddle \u00e9:", "example": "Imaginary word", "group": "Portuguese"}, {"text": "Pour d\u00e9guster un ortolan, il faut tout d'abord", "example_title": "Recipe", "group": "French"}, {"text": "34+10=44 \n54+20=", "example_title": "Addition", "group": "Math"}, {"text": "This tool converts irregular verbs to past tense.\nArise - Arose\nBecome - Became\nForget - Forgot\nFreeze -", "example_title": "Irregular verbs", "group": "English"}, {"text": "Please unscramble the letters into a word, and write that word:\nr e!c.i p r o.c a/l = reciprocal\nd.o m i!n a n.t =", "example_title": "Word unscrambling", "group": "English"}, {"text": "Estos ejemplos quitan vocales de las palabras\nEjemplos:\nhola - hl\nmanzana - mnzn\npapas - pps\nalacran - lcrn\npapa -", "example_title": "Vowel removal", "group": "Spanish"}, {"text": "Traduce espa\u00f1ol de Espa\u00f1a a espa\u00f1ol de Argentina\nEl coche es rojo - el auto es rojo\nEl ordenador es nuevo - la computadora es nueva\nel boligrafo es negro - lapicera es negra\nla nevera", "example_title": "Spanish to Argentinian Spanish", "group": "Spanish"}, {"text": "To say \"I love you\" in Hindi, you would say", "example_title": "Translation to Hindi", "group": "English"}, {"text": "To say \"I love you\" in Hindi, you would say", "example_title": "Translation from English", "group": "Hindi"}, {"text": "Poor English: She no went to the market. Corrected English:", "example_title": "Grammar exercise 1", "group": "English"}, {"text": "\u0627\u0633\u062a\u062e\u0631\u0627\u062c \u0627\u0644\u0639\u062f\u062f \u0627\u0644\u0639\u0627\u0645\u0644\u064a \u0641\u064a \u0644\u063a\u0629 \u0628\u0627\u064a\u062b\u0648\u0646:", "example_title": "Code generation", "group": "Arabic"}, {"text": "Regexp. Here is a regular expression to match a word starting with a number and then having only vowels:", "example_title": "Regular expressions", "group": "English"}, {"text": "Do a hello world in different languages:\nPython: print(\"hello world\")\nR:", "example_title": "Code generation", "group": "English"}, {"text": "Which is the correct preposition? I'm born X July. X is the preposition in\nHe sat X a chair. X is the preposition on\nShe drove X the bridge. X is the preposition", "example_title": "Grammar exercise 2", "group": "English"}, {"text": "Traduction en fran\u00e7ais: Dans cet essai je vais m'interroger sur la conscience des mod\u00e8les d'intelligence artificielle r\u00e9cents comme les mod\u00e8les de langue. Pour commencer, je m'int\u00e9resserai \u00e0 la notion de conscience et \u00e0 ce qui la caract\u00e9rise. Ensuite, j'aborderai la question de l'intelligence et de son lien avec le langage. Enfin, dans une derni\u00e8re partie je me pencherai sur le cas de l'IA et sur sa conscience.\nTraduction en espagnol:", "example_title": "Translation to Spanish", "group": "French"}, {"text": "Traducci\u00f3n al franc\u00e9s: Dans cet essai je vais m'interroger sur la conscience des mod\u00e8les d'intelligence artificielle r\u00e9cents comme les mod\u00e8les de langue. Pour commencer, je m'int\u00e9resserai \u00e0 la notion de conscience et \u00e0 ce qui la caract\u00e9rise. Ensuite, j'aborderai la question de l'intelligence et de son lien avec le langage. Enfin, dans une derni\u00e8re partie je me pencherai sur le cas de l'IA et sur sa conscience.\nTraducci\u00f3n al espa\u00f1ol:", "example_title": "Translation from French", "group": "Spanish"}, {"text": "\u0630\u0627\u062a \u0645\u0631\u0629 \u060c \u0639\u0627\u0634 \u0634\u0628\u0644 \u0627\u0644\u062f\u0628 \u0641\u064a \u0627\u0644\u063a\u0627\u0628\u0629", "example_title": "Fairy tale", "group": "Arabic"}, {"text": "\u090f\u0915 \u092c\u093e\u0930 \u0915\u0940 \u092c\u093e\u0924 \u0939\u0948, \u091c\u0902\u0917\u0932 \u092e\u0947\u0902 \u090f\u0915 \u092d\u093e\u0932\u0942 \u0915\u093e \u0936\u093e\u0935\u0915 \u0930\u0939\u0924\u093e \u0925\u093e", "example_title": "Fairy tale", "group": "Hindi"}, {"text": "Il \u00e9tait une fois une licorne qui vivait", "example_title": "Fairy tale", "group": "French"}, {"text": "Q: A juggler can juggle 16 balls. Half of the balls are golf balls, and half of the golf balls are blue. How many blue golf balls are there?\nA: Let's think step by step.", "example_title": "Mathematical reasoning", "group": "English"}], "co2_eq_emissions": {"emissions": 24700000, "source": "Estimating the Carbon Footprint of BLOOM, a 176B Parameter Language Model. https://arxiv.org/abs/2211.02001", "training_type": "pre-training", "geographical_location": "Orsay, France", "hardware_used": "384 A100 80GB GPUs"}, "model-index": [{"name": "bloom", "results": [{"task": {"type": "text-generation"}, "dataset": {"type": "openai_humaneval", "name": "humaneval"}, "metrics": [{"name": "pass@1", "type": "pass@1", "value": 0.15542682926829265, "verified": false}, {"name": "pass@10", "type": "pass@10", "value": 0.3278356276947017, "verified": false}, {"name": "pass@100", "type": "pass@100", "value": 0.5719815685597749, "verified": false}]}]}]}, "description": "\n\n<img src=\"https://s3.amazonaws.com/moonup/production/uploads/1657124309515-5f17f0a0925b9863e28ad517.png\" alt=\"BigScience Logo\" width=\"800\" style=\"margin-left:'auto' margin-right:'auto' display:'block'\"/>\n\nBigScience Large Open-science Open-access Multilingual Language Model  \nVersion 1.3 / 6 July 2022\n\nCurrent Checkpoint: **Training Iteration  95000**\n\nLink to paper: [here](https://arxiv.org/abs/2211.05100)\n\nTotal seen tokens: **366B**\n\n"}
{"downloads": 451163, "id": "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2", "likes": 115, "pipeline_tag": "sentence-similarity", "task": "sentence-similarity", "meta": {"pipeline_tag": "sentence-similarity", "language": "multilingual", "license": "apache-2.0", "tags": ["sentence-transformers", "feature-extraction", "sentence-similarity", "transformers"]}, "description": "\n\n# sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2\n\nThis is a [sentence-transformers](https://www.SBERT.net) model: It maps sentences & paragraphs to a 384 dimensional dense vector space and can be used for tasks like clustering or semantic search.\n\n\n\n## Usage (Sentence-Transformers)\n\nUsing this model becomes easy when you have [sentence-transformers](https://www.SBERT.net) installed:\n\n```\npip install -U sentence-transformers\n```\n\nThen you can use the model like this:\n\n```python\nfrom sentence_transformers import SentenceTransformer\nsentences = [\"This is an example sentence\", \"Each sentence is converted\"]\n\nmodel = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')\nembeddings = model.encode(sentences)\nprint(embeddings)\n```\n\n\n\n## Usage (HuggingFace Transformers)\nWithout [sentence-transformers](https://www.SBERT.net), you can use the model like this: First, you pass your input through the transformer model, then you have to apply the right pooling-operation on-top of the contextualized word embeddings.\n\n```python\nfrom transformers import AutoTokenizer, AutoModel\nimport torch\n\n\n#Mean Pooling - Take attention mask into account for correct averaging\ndef mean_pooling(model_output, attention_mask):\n    token_embeddings = model_output[0] #First element of model_output contains all token embeddings\n    input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()\n    return torch.sum(token_embeddings * input_mask_expanded, 1) / torch.clamp(input_mask_expanded.sum(1), min=1e-9)\n\n\n# Sentences we want sentence embeddings for\nsentences = ['This is an example sentence', 'Each sentence is converted']\n\n# Load model from HuggingFace Hub\ntokenizer = AutoTokenizer.from_pretrained('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')\nmodel = AutoModel.from_pretrained('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')\n\n# Tokenize sentences\nencoded_input = tokenizer(sentences, padding=True, truncation=True, return_tensors='pt')\n\n# Compute token embeddings\nwith torch.no_grad():\n    model_output = model(**encoded_input)\n\n# Perform pooling. In this case, max pooling.\nsentence_embeddings = mean_pooling(model_output, encoded_input['attention_mask'])\n\nprint(\"Sentence embeddings:\")\nprint(sentence_embeddings)\n```\n\n\n\n## Evaluation Results\n\n\n\nFor an automated evaluation of this model, see the *Sentence Embeddings Benchmark*: [https://seb.sbert.net](https://seb.sbert.net?model_name=sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2)\n\n\n\n## Full Model Architecture\n```\nSentenceTransformer(\n  (0): Transformer({'max_seq_length': 128, 'do_lower_case': False}) with Transformer model: BertModel \n  (1): Pooling({'word_embedding_dimension': 384, 'pooling_mode_cls_token': False, 'pooling_mode_mean_tokens': True, 'pooling_mode_max_tokens': False, 'pooling_mode_mean_sqrt_len_tokens': False})\n)\n```\n\n## Citing & Authors\n\nThis model was trained by [sentence-transformers](https://www.sbert.net/). \n        \nIf you find this model helpful, feel free to cite our publication [Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks](https://arxiv.org/abs/1908.10084):\n```bibtex \n@inproceedings{reimers-2019-sentence-bert,\n    title = \"Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks\",\n    author = \"Reimers, Nils and Gurevych, Iryna\",\n    booktitle = \"Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing\",\n    month = \"11\",\n    year = \"2019\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"http://arxiv.org/abs/1908.10084\",\n}\n```"}
{"downloads": 54975, "id": "openai/whisper-tiny", "likes": 48, "pipeline_tag": "automatic-speech-recognition", "task": "automatic-speech-recognition", "meta": {"language": ["en", "zh", "de", "es", "ru", "ko", "fr", "ja", "pt", "tr", "pl", "ca", "nl", "ar", "sv", "it", "id", "hi", "fi", "vi", "he", "uk", "el", "ms", "cs", "ro", "da", "hu", "ta", false, "th", "ur", "hr", "bg", "lt", "la", "mi", "ml", "cy", "sk", "te", "fa", "lv", "bn", "sr", "az", "sl", "kn", "et", "mk", "br", "eu", "is", "hy", "ne", "mn", "bs", "kk", "sq", "sw", "gl", "mr", "pa", "si", "km", "sn", "yo", "so", "af", "oc", "ka", "be", "tg", "sd", "gu", "am", "yi", "lo", "uz", "fo", "ht", "ps", "tk", "nn", "mt", "sa", "lb", "my", "bo", "tl", "mg", "as", "tt", "haw", "ln", "ha", "ba", "jw", "su"], "tags": ["audio", "automatic-speech-recognition", "hf-asr-leaderboard"], "widget": [{"example_title": "Librispeech sample 1", "src": "https://cdn-media.huggingface.co/speech_samples/sample1.flac"}, {"example_title": "Librispeech sample 2", "src": "https://cdn-media.huggingface.co/speech_samples/sample2.flac"}], "model-index": [{"name": "whisper-tiny", "results": [{"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "LibriSpeech (clean)", "type": "librispeech_asr", "config": "clean", "split": "test", "args": {"language": "en"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 7.54}]}, {"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "LibriSpeech (other)", "type": "librispeech_asr", "config": "other", "split": "test", "args": {"language": "en"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 17.15}]}, {"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "Common Voice 11.0", "type": "mozilla-foundation/common_voice_11_0", "config": "hi", "split": "test", "args": {"language": "hi"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 141}]}]}], "pipeline_tag": "automatic-speech-recognition", "license": "apache-2.0"}, "description": "\n\n# Whisper\n\nWhisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours \nof labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains **without** the need \nfor fine-tuning.\n\nWhisper was proposed in the paper [Robust Speech Recognition via Large-Scale Weak Supervision](https://arxiv.org/abs/2212.04356) \nby Alec Radford et al from OpenAI. The original code repository can be found [here](https://github.com/openai/whisper).\n\n**Disclaimer**: Content for this model card has partly been written by the Hugging Face team, and parts of it were \ncopied and pasted from the original model card.\n\n## Model details\n\nWhisper is a Transformer based encoder-decoder model, also referred to as a _sequence-to-sequence_ model. \nIt was trained on 680k hours of labelled speech data annotated using large-scale weak supervision. \n\nThe models were trained on either English-only data or multilingual data. The English-only models were trained \non the task of speech recognition. The multilingual models were trained on both speech recognition and speech \ntranslation. For speech recognition, the model predicts transcriptions in the *same* language as the audio. \nFor speech translation, the model predicts transcriptions to a *different* language to the audio.\n\nWhisper checkpoints come in five configurations of varying model sizes.\nThe smallest four are trained on either English-only or multilingual data.\nThe largest checkpoints are multilingual only. All ten of the pre-trained checkpoints \nare available on the [Hugging Face Hub](https://huggingface.co/models?search=openai/whisper). The \ncheckpoints are summarised in the following table with links to the models on the Hub:\n\n| Size     | Parameters | English-only                                         | Multilingual                                        |\n|"}
{"downloads": 323702, "id": "sentence-transformers/paraphrase-multilingual-mpnet-base-v2", "likes": 68, "pipeline_tag": "sentence-similarity", "task": "sentence-similarity", "meta": {"pipeline_tag": "sentence-similarity", "license": "apache-2.0", "tags": ["sentence-transformers", "feature-extraction", "sentence-similarity", "transformers"]}, "description": "\n\n# sentence-transformers/paraphrase-multilingual-mpnet-base-v2\n\nThis is a [sentence-transformers](https://www.SBERT.net) model: It maps sentences & paragraphs to a 768 dimensional dense vector space and can be used for tasks like clustering or semantic search.\n\n\n\n## Usage (Sentence-Transformers)\n\nUsing this model becomes easy when you have [sentence-transformers](https://www.SBERT.net) installed:\n\n```\npip install -U sentence-transformers\n```\n\nThen you can use the model like this:\n\n```python\nfrom sentence_transformers import SentenceTransformer\nsentences = [\"This is an example sentence\", \"Each sentence is converted\"]\n\nmodel = SentenceTransformer('sentence-transformers/paraphrase-multilingual-mpnet-base-v2')\nembeddings = model.encode(sentences)\nprint(embeddings)\n```\n\n\n\n## Usage (HuggingFace Transformers)\nWithout [sentence-transformers](https://www.SBERT.net), you can use the model like this: First, you pass your input through the transformer model, then you have to apply the right pooling-operation on-top of the contextualized word embeddings.\n\n```python\nfrom transformers import AutoTokenizer, AutoModel\nimport torch\n\n\n#Mean Pooling - Take attention mask into account for correct averaging\ndef mean_pooling(model_output, attention_mask):\n    token_embeddings = model_output[0] #First element of model_output contains all token embeddings\n    input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()\n    return torch.sum(token_embeddings * input_mask_expanded, 1) / torch.clamp(input_mask_expanded.sum(1), min=1e-9)\n\n\n# Sentences we want sentence embeddings for\nsentences = ['This is an example sentence', 'Each sentence is converted']\n\n# Load model from HuggingFace Hub\ntokenizer = AutoTokenizer.from_pretrained('sentence-transformers/paraphrase-multilingual-mpnet-base-v2')\nmodel = AutoModel.from_pretrained('sentence-transformers/paraphrase-multilingual-mpnet-base-v2')\n\n# Tokenize sentences\nencoded_input = tokenizer(sentences, padding=True, truncation=True, return_tensors='pt')\n\n# Compute token embeddings\nwith torch.no_grad():\n    model_output = model(**encoded_input)\n\n# Perform pooling. In this case, max pooling.\nsentence_embeddings = mean_pooling(model_output, encoded_input['attention_mask'])\n\nprint(\"Sentence embeddings:\")\nprint(sentence_embeddings)\n```\n\n\n\n## Evaluation Results\n\n\n\nFor an automated evaluation of this model, see the *Sentence Embeddings Benchmark*: [https://seb.sbert.net](https://seb.sbert.net?model_name=sentence-transformers/paraphrase-multilingual-mpnet-base-v2)\n\n\n\n## Full Model Architecture\n```\nSentenceTransformer(\n  (0): Transformer({'max_seq_length': 128, 'do_lower_case': False}) with Transformer model: XLMRobertaModel \n  (1): Pooling({'word_embedding_dimension': 768, 'pooling_mode_cls_token': False, 'pooling_mode_mean_tokens': True, 'pooling_mode_max_tokens': False, 'pooling_mode_mean_sqrt_len_tokens': False})\n)\n```\n\n## Citing & Authors\n\nThis model was trained by [sentence-transformers](https://www.sbert.net/). \n        \nIf you find this model helpful, feel free to cite our publication [Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks](https://arxiv.org/abs/1908.10084):\n```bibtex \n@inproceedings{reimers-2019-sentence-bert,\n    title = \"Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks\",\n    author = \"Reimers, Nils and Gurevych, Iryna\",\n    booktitle = \"Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing\",\n    month = \"11\",\n    year = \"2019\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"http://arxiv.org/abs/1908.10084\",\n}\n```"}
{"downloads": 184038, "id": "facebook/nllb-200-distilled-600M", "likes": 103, "pipeline_tag": "translation", "task": "translation", "meta": {"language": ["ace", "acm", "acq", "aeb", "af", "ajp", "ak", "als", "am", "apc", "ar", "ars", "ary", "arz", "as", "ast", "awa", "ayr", "azb", "azj", "ba", "bm", "ban", "be", "bem", "bn", "bho", "bjn", "bo", "bs", "bug", "bg", "ca", "ceb", "cs", "cjk", "ckb", "crh", "cy", "da", "de", "dik", "dyu", "dz", "el", "en", "eo", "et", "eu", "ee", "fo", "fj", "fi", "fon", "fr", "fur", "fuv", "gaz", "gd", "ga", "gl", "gn", "gu", "ht", "ha", "he", "hi", "hne", "hr", "hu", "hy", "ig", "ilo", "id", "is", "it", "jv", "ja", "kab", "kac", "kam", "kn", "ks", "ka", "kk", "kbp", "kea", "khk", "km", "ki", "rw", "ky", "kmb", "kmr", "knc", "kg", "ko", "lo", "lij", "li", "ln", "lt", "lmo", "ltg", "lb", "lua", "lg", "luo", "lus", "lvs", "mag", "mai", "ml", "mar", "min", "mk", "mt", "mni", "mos", "mi", "my", "nl", "nn", "nb", "npi", "nso", "nus", "ny", "oc", "ory", "pag", "pa", "pap", "pbt", "pes", "plt", "pl", "pt", "prs", "quy", "ro", "rn", "ru", "sg", "sa", "sat", "scn", "shn", "si", "sk", "sl", "sm", "sn", "sd", "so", "st", "es", "sc", "sr", "ss", "su", "sv", "swh", "szl", "ta", "taq", "tt", "te", "tg", "tl", "th", "ti", "tpi", "tn", "ts", "tk", "tum", "tr", "tw", "tzm", "ug", "uk", "umb", "ur", "uzn", "vec", "vi", "war", "wo", "xh", "ydd", "yo", "yue", "zh", "zsm", "zu"], "language_details": "ace_Arab, ace_Latn, acm_Arab, acq_Arab, aeb_Arab, afr_Latn, ajp_Arab, aka_Latn, amh_Ethi, apc_Arab, arb_Arab, ars_Arab, ary_Arab, arz_Arab, asm_Beng, ast_Latn, awa_Deva, ayr_Latn, azb_Arab, azj_Latn, bak_Cyrl, bam_Latn, ban_Latn,bel_Cyrl, bem_Latn, ben_Beng, bho_Deva, bjn_Arab, bjn_Latn, bod_Tibt, bos_Latn, bug_Latn, bul_Cyrl, cat_Latn, ceb_Latn, ces_Latn, cjk_Latn, ckb_Arab, crh_Latn, cym_Latn, dan_Latn, deu_Latn, dik_Latn, dyu_Latn, dzo_Tibt, ell_Grek, eng_Latn, epo_Latn, est_Latn, eus_Latn, ewe_Latn, fao_Latn, pes_Arab, fij_Latn, fin_Latn, fon_Latn, fra_Latn, fur_Latn, fuv_Latn, gla_Latn, gle_Latn, glg_Latn, grn_Latn, guj_Gujr, hat_Latn, hau_Latn, heb_Hebr, hin_Deva, hne_Deva, hrv_Latn, hun_Latn, hye_Armn, ibo_Latn, ilo_Latn, ind_Latn, isl_Latn, ita_Latn, jav_Latn, jpn_Jpan, kab_Latn, kac_Latn, kam_Latn, kan_Knda, kas_Arab, kas_Deva, kat_Geor, knc_Arab, knc_Latn, kaz_Cyrl, kbp_Latn, kea_Latn, khm_Khmr, kik_Latn, kin_Latn, kir_Cyrl, kmb_Latn, kon_Latn, kor_Hang, kmr_Latn, lao_Laoo, lvs_Latn, lij_Latn, lim_Latn, lin_Latn, lit_Latn, lmo_Latn, ltg_Latn, ltz_Latn, lua_Latn, lug_Latn, luo_Latn, lus_Latn, mag_Deva, mai_Deva, mal_Mlym, mar_Deva, min_Latn, mkd_Cyrl, plt_Latn, mlt_Latn, mni_Beng, khk_Cyrl, mos_Latn, mri_Latn, zsm_Latn, mya_Mymr, nld_Latn, nno_Latn, nob_Latn, npi_Deva, nso_Latn, nus_Latn, nya_Latn, oci_Latn, gaz_Latn, ory_Orya, pag_Latn, pan_Guru, pap_Latn, pol_Latn, por_Latn, prs_Arab, pbt_Arab, quy_Latn, ron_Latn, run_Latn, rus_Cyrl, sag_Latn, san_Deva, sat_Beng, scn_Latn, shn_Mymr, sin_Sinh, slk_Latn, slv_Latn, smo_Latn, sna_Latn, snd_Arab, som_Latn, sot_Latn, spa_Latn, als_Latn, srd_Latn, srp_Cyrl, ssw_Latn, sun_Latn, swe_Latn, swh_Latn, szl_Latn, tam_Taml, tat_Cyrl, tel_Telu, tgk_Cyrl, tgl_Latn, tha_Thai, tir_Ethi, taq_Latn, taq_Tfng, tpi_Latn, tsn_Latn, tso_Latn, tuk_Latn, tum_Latn, tur_Latn, twi_Latn, tzm_Tfng, uig_Arab, ukr_Cyrl, umb_Latn, urd_Arab, uzn_Latn, vec_Latn, vie_Latn, war_Latn, wol_Latn, xho_Latn, ydd_Hebr, yor_Latn, yue_Hant, zho_Hans, zho_Hant, zul_Latn", "tags": ["nllb", "translation"], "license": "cc-by-nc-4.0", "datasets": ["flores-200"], "metrics": ["bleu", "spbleu", "chrf++"], "inference": false}, "description": "\n\n# NLLB-200\n\nThis is the model card of NLLB-200's distilled 600M variant.\n\nHere are the [metrics](https://tinyurl.com/nllb200densedst600mmetrics) for that particular checkpoint.\n\n- Information about training algorithms, parameters, fairness constraints or other applied approaches, and features. The exact training algorithm, data and the strategies to handle data imbalances for high and low resource languages that were used to train NLLB-200 is described in the paper.\n- Paper or other resource for more information NLLB Team et al, No Language Left Behind: Scaling Human-Centered Machine Translation, Arxiv, 2022\n- License: CC-BY-NC\n- Where to send questions or comments about the model: https://github.com/facebookresearch/fairseq/issues\n\n\n\n## Intended Use\n- Primary intended uses: NLLB-200 is a machine translation model primarily intended for research in machine translation, - especially for low-resource languages. It allows for single sentence translation among 200 languages. Information on how to - use the model can be found in Fairseq code repository along with the training code and references to evaluation and training data.\n- Primary intended users: Primary users are researchers and machine translation research community.\n- Out-of-scope use cases: NLLB-200 is a research model and is not released for production deployment. NLLB-200 is trained on general domain text data and is not intended to be used with domain specific texts, such as medical domain or legal domain. The model is not intended to be used for document translation. The model was trained with input lengths not exceeding 512 tokens, therefore translating longer sequences might result in quality degradation. NLLB-200 translations can not be used as certified translations. \n\n## Metrics\n\u2022 Model performance measures: NLLB-200 model was evaluated using BLEU, spBLEU, and chrF++ metrics widely adopted by machine translation community. Additionally, we performed human evaluation with the XSTS protocol and measured the toxicity of the generated translations.\n\n\n## Evaluation Data\n- Datasets: Flores-200 dataset is described in Section 4\n- Motivation: We used Flores-200 as it provides full evaluation coverage of the languages in NLLB-200\n- Preprocessing: Sentence-split raw text data was preprocessed using SentencePiece. The\nSentencePiece model is released along with NLLB-200.\n\n## Training Data\n\u2022 We used parallel multilingual data from a variety of sources to train the model. We provide detailed report on data selection and construction process in Section 5 in the paper. We also used monolingual data constructed from Common Crawl. We provide more details in Section 5.2.\n\n## Ethical Considerations\n\u2022 In this work, we took a reflexive approach in technological development to ensure that we prioritize human users and minimize risks that could be transferred to them. While we reflect on our ethical considerations throughout the article, here are some additional points to highlight. For one, many languages chosen for this study are low-resource languages, with a heavy emphasis on African languages. While quality translation could improve education and information access in many in these communities, such an access could also make groups with lower levels of digital literacy more vulnerable to misinformation or online scams. The latter scenarios could arise if bad actors misappropriate our work for nefarious activities, which we conceive as an example of unintended use. Regarding data acquisition, the training data used for model development were mined from various publicly available sources on the web. Although we invested heavily in data cleaning, personally identifiable information may not be entirely eliminated. Finally, although we did our best to optimize for translation quality, mistranslations produced by the model could remain. Although the odds are low, this could have adverse impact on those who rely on these translations to make important decisions (particularly when related to health and safety).\n\n## Caveats and Recommendations\n\u2022 Our model has been tested on the Wikimedia domain with limited investigation on other domains supported in NLLB-MD. In addition, the supported languages may have variations that our model is not capturing. Users should make appropriate assessments.\n\n## Carbon Footprint Details\n\u2022 The carbon dioxide (CO2e) estimate is reported in Section 8.8."}
{"downloads": 306383, "id": "facebook/m2m100_418M", "likes": 65, "pipeline_tag": "text2text-generation", "task": "text2text-generation", "meta": {"language": ["multilingual", "af", "am", "ar", "ast", "az", "ba", "be", "bg", "bn", "br", "bs", "ca", "ceb", "cs", "cy", "da", "de", "el", "en", "es", "et", "fa", "ff", "fi", "fr", "fy", "ga", "gd", "gl", "gu", "ha", "he", "hi", "hr", "ht", "hu", "hy", "id", "ig", "ilo", "is", "it", "ja", "jv", "ka", "kk", "km", "kn", "ko", "lb", "lg", "ln", "lo", "lt", "lv", "mg", "mk", "ml", "mn", "mr", "ms", "my", "ne", "nl", false, "ns", "oc", "or", "pa", "pl", "ps", "pt", "ro", "ru", "sd", "si", "sk", "sl", "so", "sq", "sr", "ss", "su", "sv", "sw", "ta", "th", "tl", "tn", "tr", "uk", "ur", "uz", "vi", "wo", "xh", "yi", "yo", "zh", "zu"], "license": "mit", "tags": null}, "description": "\n\n# M2M100 418M\n\nM2M100 is a multilingual encoder-decoder (seq-to-seq) model trained for Many-to-Many multilingual translation.\nIt was introduced in this [paper](https://arxiv.org/abs/2010.11125) and first released in [this](https://github.com/pytorch/fairseq/tree/master/examples/m2m_100) repository.\n\nThe model that can directly translate between the 9,900 directions of 100 languages.\nTo translate into a target language, the target language id is forced as the first generated token.\nTo force the target language id as the first generated token, pass the `forced_bos_token_id` parameter to the `generate` method.\n\n*Note: `M2M100Tokenizer` depends on `sentencepiece`, so make sure to install it before running the example.*\n\nTo install `sentencepiece` run `pip install sentencepiece`\n\n\n```python\nfrom transformers import M2M100ForConditionalGeneration, M2M100Tokenizer\n\nhi_text = \"\u091c\u0940\u0935\u0928 \u090f\u0915 \u091a\u0949\u0915\u0932\u0947\u091f \u092c\u0949\u0915\u094d\u0938 \u0915\u0940 \u0924\u0930\u0939 \u0939\u0948\u0964\"\nchinese_text = \"\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b\u3002\"\n\nmodel = M2M100ForConditionalGeneration.from_pretrained(\"facebook/m2m100_418M\")\ntokenizer = M2M100Tokenizer.from_pretrained(\"facebook/m2m100_418M\")\n\n# translate Hindi to French\ntokenizer.src_lang = \"hi\"\nencoded_hi = tokenizer(hi_text, return_tensors=\"pt\")\ngenerated_tokens = model.generate(**encoded_hi, forced_bos_token_id=tokenizer.get_lang_id(\"fr\"))\ntokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\n# => \"La vie est comme une bo\u00eete de chocolat.\"\n\n# translate Chinese to English\ntokenizer.src_lang = \"zh\"\nencoded_zh = tokenizer(chinese_text, return_tensors=\"pt\")\ngenerated_tokens = model.generate(**encoded_zh, forced_bos_token_id=tokenizer.get_lang_id(\"en\"))\ntokenizer.batch_decode(generated_tokens, skip_special_tokens=True)\n# => \"Life is like a box of chocolate.\"\n```\n\n\nSee the [model hub](https://huggingface.co/models?filter=m2m_100) to look for more fine-tuned versions.\n\n\n## Languages covered\nAfrikaans (af), Amharic (am), Arabic (ar),  Asturian (ast), Azerbaijani (az), Bashkir (ba), Belarusian (be), Bulgarian (bg), Bengali (bn), Breton (br), Bosnian (bs), Catalan; Valencian (ca), Cebuano (ceb), Czech (cs), Welsh (cy), Danish (da), German (de), Greeek (el), English (en), Spanish (es), Estonian (et), Persian (fa), Fulah (ff), Finnish (fi), French (fr), Western Frisian (fy), Irish (ga), Gaelic; Scottish Gaelic (gd), Galician (gl), Gujarati (gu), Hausa (ha), Hebrew (he), Hindi (hi), Croatian (hr), Haitian; Haitian Creole (ht), Hungarian (hu), Armenian (hy), Indonesian (id), Igbo (ig),  Iloko (ilo), Icelandic (is), Italian (it), Japanese (ja), Javanese (jv), Georgian (ka), Kazakh (kk), Central Khmer (km), Kannada (kn), Korean (ko), Luxembourgish; Letzeburgesch (lb), Ganda (lg), Lingala (ln), Lao (lo), Lithuanian (lt), Latvian (lv), Malagasy (mg), Macedonian (mk), Malayalam (ml), Mongolian (mn), Marathi (mr), Malay (ms), Burmese (my), Nepali (ne), Dutch; Flemish (nl), Norwegian (no),  Northern Sotho (ns), Occitan (post 1500) (oc), Oriya (or), Panjabi; Punjabi (pa), Polish (pl), Pushto; Pashto (ps), Portuguese (pt), Romanian; Moldavian; Moldovan (ro), Russian (ru), Sindhi (sd), Sinhala; Sinhalese (si), Slovak (sk), Slovenian (sl), Somali (so), Albanian (sq), Serbian (sr), Swati (ss), Sundanese (su), Swedish (sv), Swahili (sw), Tamil (ta), Thai (th), Tagalog (tl), Tswana (tn), Turkish (tr), Ukrainian (uk), Urdu (ur), Uzbek (uz), Vietnamese (vi), Wolof (wo), Xhosa (xh), Yiddish (yi), Yoruba (yo), Chinese (zh), Zulu (zu)\n\n\n## BibTeX entry and citation info\n```\n@misc{fan2020englishcentric,\n      title={Beyond English-Centric Multilingual Machine Translation}, \n      author={Angela Fan and Shruti Bhosale and Holger Schwenk and Zhiyi Ma and Ahmed El-Kishky and Siddharth Goyal and Mandeep Baines and Onur Celebi and Guillaume Wenzek and Vishrav Chaudhary and Naman Goyal and Tom Birch and Vitaliy Liptchinsky and Sergey Edunov and Edouard Grave and Michael Auli and Armand Joulin},\n      year={2020},\n      eprint={2010.11125},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```"}
{"downloads": 25522, "id": "openai/whisper-base", "likes": 52, "pipeline_tag": "automatic-speech-recognition", "task": "automatic-speech-recognition", "meta": {"language": ["en", "zh", "de", "es", "ru", "ko", "fr", "ja", "pt", "tr", "pl", "ca", "nl", "ar", "sv", "it", "id", "hi", "fi", "vi", "he", "uk", "el", "ms", "cs", "ro", "da", "hu", "ta", false, "th", "ur", "hr", "bg", "lt", "la", "mi", "ml", "cy", "sk", "te", "fa", "lv", "bn", "sr", "az", "sl", "kn", "et", "mk", "br", "eu", "is", "hy", "ne", "mn", "bs", "kk", "sq", "sw", "gl", "mr", "pa", "si", "km", "sn", "yo", "so", "af", "oc", "ka", "be", "tg", "sd", "gu", "am", "yi", "lo", "uz", "fo", "ht", "ps", "tk", "nn", "mt", "sa", "lb", "my", "bo", "tl", "mg", "as", "tt", "haw", "ln", "ha", "ba", "jw", "su"], "tags": ["audio", "automatic-speech-recognition", "hf-asr-leaderboard"], "widget": [{"example_title": "Librispeech sample 1", "src": "https://cdn-media.huggingface.co/speech_samples/sample1.flac"}, {"example_title": "Librispeech sample 2", "src": "https://cdn-media.huggingface.co/speech_samples/sample2.flac"}], "model-index": [{"name": "whisper-base", "results": [{"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "LibriSpeech (clean)", "type": "librispeech_asr", "config": "clean", "split": "test", "args": {"language": "en"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 5.008769117619326}]}, {"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "LibriSpeech (other)", "type": "librispeech_asr", "config": "other", "split": "test", "args": {"language": "en"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 12.84936273212057}]}, {"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "Common Voice 11.0", "type": "mozilla-foundation/common_voice_11_0", "config": "hi", "split": "test", "args": {"language": "hi"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 131}]}]}], "pipeline_tag": "automatic-speech-recognition", "license": "apache-2.0"}, "description": "\n\n# Whisper\n\nWhisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours \nof labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains **without** the need \nfor fine-tuning.\n\nWhisper was proposed in the paper [Robust Speech Recognition via Large-Scale Weak Supervision](https://arxiv.org/abs/2212.04356) \nby Alec Radford et al from OpenAI. The original code repository can be found [here](https://github.com/openai/whisper).\n\n**Disclaimer**: Content for this model card has partly been written by the Hugging Face team, and parts of it were \ncopied and pasted from the original model card.\n\n## Model details\n\nWhisper is a Transformer based encoder-decoder model, also referred to as a _sequence-to-sequence_ model. \nIt was trained on 680k hours of labelled speech data annotated using large-scale weak supervision. \n\nThe models were trained on either English-only data or multilingual data. The English-only models were trained \non the task of speech recognition. The multilingual models were trained on both speech recognition and speech \ntranslation. For speech recognition, the model predicts transcriptions in the *same* language as the audio. \nFor speech translation, the model predicts transcriptions to a *different* language to the audio.\n\nWhisper checkpoints come in five configurations of varying model sizes.\nThe smallest four are trained on either English-only or multilingual data.\nThe largest checkpoints are multilingual only. All ten of the pre-trained checkpoints \nare available on the [Hugging Face Hub](https://huggingface.co/models?search=openai/whisper). The \ncheckpoints are summarised in the following table with links to the models on the Hub:\n\n| Size     | Parameters | English-only                                         | Multilingual                                        |\n|"}
{"downloads": 5762, "id": "timpal0l/mdeberta-v3-base-squad2", "likes": 25, "pipeline_tag": "question-answering", "task": "question-answering", "meta": {"datasets": ["squad_v2"], "language": ["multilingual", "af", "am", "ar", "as", "az", "be", "bg", "bn", "br", "bs", "ca", "cs", "cy", "da", "de", "el", "en", "eo", "es", "et", "eu", "fa", "fi", "fr", "fy", "ga", "gd", "gl", "gu", "ha", "he", "hi", "hr", "hu", "hy", "id", "is", "it", "ja", "jv", "ka", "kk", "km", "kn", "ko", "ku", "ky", "la", "lo", "lt", "lv", "mg", "mk", "ml", "mn", "mr", "ms", "my", "ne", "nl", false, "om", "or", "pa", "pl", "ps", "pt", "ro", "ru", "sa", "sd", "si", "sk", "sl", "so", "sq", "sr", "su", "sv", "sw", "ta", "te", "th", "tl", "tr", "ug", "uk", "ur", "uz", "vi", "xh", "yi", "zh"], "tags": ["deberta", "deberta-v3", "mdeberta", "question-answering"], "thumbnail": "https://huggingface.co/front/thumbnails/microsoft.png", "license": "mit"}, "description": "\n## This model can be used for Extractive QA\nIt has been finetuned for 3 epochs on [SQuAD2.0](https://rajpurkar.github.io/SQuAD-explorer/).\n\n## Evaluation on SQuAD2.0 dev set\n```\n{\n    \"epoch\": 3.0,\n    \"eval_HasAns_exact\": 79.65587044534414,\n    \"eval_HasAns_f1\": 85.91387795001529,\n    \"eval_HasAns_total\": 5928,\n    \"eval_NoAns_exact\": 82.10260723296888,\n    \"eval_NoAns_f1\": 82.10260723296888,\n    \"eval_NoAns_total\": 5945,\n    \"eval_best_exact\": 80.8809904826076,\n    \"eval_best_exact_thresh\": 0.0,\n    \"eval_best_f1\": 84.00551406448994,\n    \"eval_best_f1_thresh\": 0.0,\n    \"eval_exact\": 80.8809904826076,\n    \"eval_f1\": 84.00551406449004,\n    \"eval_samples\": 12508,\n    \"eval_total\": 11873,\n    \"train_loss\": 0.7729689576483615,\n    \"train_runtime\": 9118.953,\n    \"train_samples\": 134891,\n    \"train_samples_per_second\": 44.377,\n    \"train_steps_per_second\": 0.925\n}\n``` \n## DeBERTaV3: Improving DeBERTa using ELECTRA-Style Pre-Training with Gradient-Disentangled Embedding Sharing\n\n[DeBERTa](https://arxiv.org/abs/2006.03654) improves the BERT and RoBERTa models using disentangled attention and enhanced mask decoder. With those two improvements, DeBERTa out perform RoBERTa on a majority of NLU tasks with 80GB training data. \n\nIn [DeBERTa V3](https://arxiv.org/abs/2111.09543), we further improved the efficiency of DeBERTa using ELECTRA-Style pre-training with Gradient Disentangled Embedding Sharing. Compared to DeBERTa,  our V3 version significantly improves the model performance on downstream tasks.  You can find more technique details about the new model from our [paper](https://arxiv.org/abs/2111.09543).\n\nPlease check the [official repository](https://github.com/microsoft/DeBERTa) for more implementation details and updates.\n\nmDeBERTa is multilingual version of DeBERTa which use the same structure as DeBERTa and was trained with CC100 multilingual data.\nThe mDeBERTa V3 base model comes with 12 layers and a hidden size of 768. It has 86M backbone parameters  with a vocabulary containing 250K tokens which introduces 190M parameters in the Embedding layer.  This model was trained using the 2.5T CC100 data as XLM-R.\n"}
{"downloads": 1240754, "id": "papluca/xlm-roberta-base-language-detection", "likes": 75, "pipeline_tag": "text-classification", "task": "text-classification", "meta": {"language": ["multilingual", "ar", "bg", "de", "el", "en", "es", "fr", "hi", "it", "ja", "nl", "pl", "pt", "ru", "sw", "th", "tr", "ur", "vi", "zh"], "license": "mit", "tags": ["generated_from_trainer"], "metrics": ["accuracy", "f1"], "model-index": [{"name": "xlm-roberta-base-language-detection", "results": []}]}, "description": "\n\n# xlm-roberta-base-language-detection\n\nThis model is a fine-tuned version of [xlm-roberta-base](https://huggingface.co/xlm-roberta-base) on the [Language Identification](https://huggingface.co/datasets/papluca/language-identification#additional-information) dataset.\n\n## Model description\n\nThis model is an XLM-RoBERTa transformer model with a classification head on top (i.e. a linear layer on top of the pooled output). \nFor additional information please refer to the [xlm-roberta-base](https://huggingface.co/xlm-roberta-base) model card or to the paper [Unsupervised Cross-lingual Representation Learning at Scale](https://arxiv.org/abs/1911.02116) by Conneau et al.\n\n## Intended uses & limitations\n\nYou can directly use this model as a language detector, i.e. for sequence classification tasks. Currently, it supports the following 20 languages: \n\n`arabic (ar), bulgarian (bg), german (de), modern greek (el), english (en), spanish (es), french (fr), hindi (hi), italian (it), japanese (ja), dutch (nl), polish (pl), portuguese (pt), russian (ru), swahili (sw), thai (th), turkish (tr), urdu (ur), vietnamese (vi), and chinese (zh)`\n\n## Training and evaluation data\n\nThe model was fine-tuned on the [Language Identification](https://huggingface.co/datasets/papluca/language-identification#additional-information) dataset, which consists of text sequences in 20 languages. The training set contains 70k samples, while the validation and test sets 10k each. The average accuracy on the test set is **99.6%** (this matches the average macro/weighted F1-score being the test set perfectly balanced). A more detailed evaluation is provided by the following table.\n\n| Language | Precision | Recall | F1-score | support |\n|:"}
{"downloads": 127418, "id": "sentence-transformers/LaBSE", "likes": 48, "pipeline_tag": "sentence-similarity", "task": "sentence-similarity", "meta": {"pipeline_tag": "sentence-similarity", "tags": ["sentence-transformers", "feature-extraction", "sentence-similarity", "transformers"], "license": "apache-2.0"}, "description": "\n\n# LaBSE\nThis is a port of the [LaBSE](https://tfhub.dev/google/LaBSE/1) model to PyTorch. It can be used to map 109 languages to a shared vector space.\n\n\n## Usage (Sentence-Transformers)\n\nUsing this model becomes easy when you have [sentence-transformers](https://www.SBERT.net) installed:\n\n```\npip install -U sentence-transformers\n```\n\nThen you can use the model like this:\n\n```python\nfrom sentence_transformers import SentenceTransformer\nsentences = [\"This is an example sentence\", \"Each sentence is converted\"]\n\nmodel = SentenceTransformer('sentence-transformers/LaBSE')\nembeddings = model.encode(sentences)\nprint(embeddings)\n```\n\n\n\n## Evaluation Results\n\n\n\nFor an automated evaluation of this model, see the *Sentence Embeddings Benchmark*: [https://seb.sbert.net](https://seb.sbert.net?model_name=sentence-transformers/LaBSE)\n\n\n\n## Full Model Architecture\n```\nSentenceTransformer(\n  (0): Transformer({'max_seq_length': 256, 'do_lower_case': False}) with Transformer model: BertModel \n  (1): Pooling({'word_embedding_dimension': 768, 'pooling_mode_cls_token': True, 'pooling_mode_mean_tokens': False, 'pooling_mode_max_tokens': False, 'pooling_mode_mean_sqrt_len_tokens': False})\n  (2): Dense({'in_features': 768, 'out_features': 768, 'bias': True, 'activation_function': 'torch.nn.modules.activation.Tanh'})\n  (3): Normalize()\n)\n```\n\n## Citing & Authors\n\nHave a look at [LaBSE](https://tfhub.dev/google/LaBSE/1) for the respective publication that describes LaBSE.\n\n"}
{"downloads": 509, "id": "voidful/wav2vec2-xlsr-multilingual-56", "likes": 17, "pipeline_tag": "automatic-speech-recognition", "task": "automatic-speech-recognition", "meta": {"language": ["multilingual", "ar", "as", "br", "ca", "cnh", "cs", "cv", "cy", "de", "dv", "el", "en", "eo", "es", "et", "eu", "fa", "fi", "fr", "hi", "hsb", "hu", "ia", "id", "ja", "ka", "ky", "lg", "lt", "ly", "mn", "mt", "nl", "or", "pl", "pt", "ro", "ru", "sah", "sl", "ta", "th", "tr", "tt", "uk", "vi"], "license": "apache-2.0", "tags": ["audio", "automatic-speech-recognition", "hf-asr-leaderboard", "robust-speech-event", "speech", "xlsr-fine-tuning-week"], "datasets": ["common_voice"], "language_bcp47": ["fy-NL", "ga-IE", "pa-IN", "rm-sursilv", "rm-vallader", "sy-SE", "zh-CN", "zh-HK", "zh-TW"], "model-index": [{"name": "XLSR Wav2Vec2 for 56 language by Voidful", "results": [{"task": {"type": "automatic-speech-recognition", "name": "Speech Recognition"}, "dataset": {"name": "Common Voice", "type": "common_voice"}, "metrics": [{"type": "cer", "value": 23.21, "name": "Test CER"}]}]}]}, "description": "\n\n# Model Card for wav2vec2-xlsr-multilingual-56\n \n \n# Model Details\n \n## Model Description\n \n- **Developed by:** voidful\n- **Shared by [Optional]:** Hugging Face\n- **Model type:** automatic-speech-recognition\n- **Language(s) (NLP):** multilingual (*56 language, 1 model Multilingual ASR*)\n- **License:** Apache-2.0\n- **Related Models:**\n  - **Parent Model:** wav2vec\n- **Resources for more information:** \n    - [GitHub Repo](https://github.com/voidful/wav2vec2-xlsr-multilingual-56)\n \t- [Model Space](https://huggingface.co/spaces/Kamtera/Persian_Automatic_Speech_Recognition_and-more)\n \n \n# Uses\n \n \n## Direct Use\n \nThis model can be used for the task of automatic-speech-recognition\n \n## Downstream Use [Optional]\n \nMore information needed\n \n## Out-of-Scope Use\n \nThe model should not be used to intentionally create hostile or alienating environments for people.\n \n# Bias, Risks, and Limitations\n \nSignificant research has explored bias and fairness issues with language models (see, e.g., [Sheng et al. (2021)](https://aclanthology.org/2021.acl-long.330.pdf) and [Bender et al. (2021)](https://dl.acm.org/doi/pdf/10.1145/3442188.3445922)). Predictions generated by the model may include disturbing and harmful stereotypes across protected classes; identity characteristics; and sensitive, social, and occupational groups.\n \n \n## Recommendations\n \nUsers (both direct and downstream) should be made aware of the risks, biases and limitations of the model. More information needed for further recommendations.\n \n \n# Training Details\n \n## Training Data\n \nSee the [common_voice dataset card](https://huggingface.co/datasets/common_voice)\nFine-tuned [facebook/wav2vec2-large-xlsr-53](https://huggingface.co/facebook/wav2vec2-large-xlsr-53) on 56 language using the [Common Voice](https://huggingface.co/datasets/common_voice).  \n \n## Training Procedure\n \n \n### Preprocessing\n \nMore information needed\n \n### Speeds, Sizes, Times\n \n \nWhen using this model, make sure that your speech input is sampled at 16kHz.\n \n \n# Evaluation\n \n \n## Testing Data, Factors & Metrics\n \n### Testing Data\n \nMore information needed\n \n### Factors\n \n \n### Metrics\n \nMore information needed\n## Results \n<details>\n <summary> Click to expand </summary>\n \n| Common Voice Languages | Num. of data | Hour   | WER    | CER   |\n|"}
{"downloads": 48397, "id": "openai/whisper-large-v2", "likes": 304, "pipeline_tag": "automatic-speech-recognition", "task": "automatic-speech-recognition", "meta": {"language": ["en", "zh", "de", "es", "ru", "ko", "fr", "ja", "pt", "tr", "pl", "ca", "nl", "ar", "sv", "it", "id", "hi", "fi", "vi", "he", "uk", "el", "ms", "cs", "ro", "da", "hu", "ta", false, "th", "ur", "hr", "bg", "lt", "la", "mi", "ml", "cy", "sk", "te", "fa", "lv", "bn", "sr", "az", "sl", "kn", "et", "mk", "br", "eu", "is", "hy", "ne", "mn", "bs", "kk", "sq", "sw", "gl", "mr", "pa", "si", "km", "sn", "yo", "so", "af", "oc", "ka", "be", "tg", "sd", "gu", "am", "yi", "lo", "uz", "fo", "ht", "ps", "tk", "nn", "mt", "sa", "lb", "my", "bo", "tl", "mg", "as", "tt", "haw", "ln", "ha", "ba", "jw", "su"], "tags": ["audio", "automatic-speech-recognition", "hf-asr-leaderboard"], "widget": [{"example_title": "Librispeech sample 1", "src": "https://cdn-media.huggingface.co/speech_samples/sample1.flac"}, {"example_title": "Librispeech sample 2", "src": "https://cdn-media.huggingface.co/speech_samples/sample2.flac"}], "pipeline_tag": "automatic-speech-recognition", "license": "apache-2.0"}, "description": "\n\n# Whisper\n\nWhisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours \nof labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains **without** the need \nfor fine-tuning.\n\nWhisper was proposed in the paper [Robust Speech Recognition via Large-Scale Weak Supervision](https://arxiv.org/abs/2212.04356) \nby Alec Radford et al. from OpenAI. The original code repository can be found [here](https://github.com/openai/whisper).\n\nCompared to the Whisper large model, the large-v2 model is trained for 2.5x more epochs with added regularization \nfor improved performance.\n\n**Disclaimer**: Content for this model card has partly been written by the Hugging Face team, and parts of it were \ncopied and pasted from the original model card.\n\n## Model details\n\nWhisper is a Transformer based encoder-decoder model, also referred to as a _sequence-to-sequence_ model. \nIt was trained on 680k hours of labelled speech data annotated using large-scale weak supervision. \n\nThe models were trained on either English-only data or multilingual data. The English-only models were trained \non the task of speech recognition. The multilingual models were trained on both speech recognition and speech \ntranslation. For speech recognition, the model predicts transcriptions in the *same* language as the audio. \nFor speech translation, the model predicts transcriptions to a *different* language to the audio.\n\nWhisper checkpoints come in five configurations of varying model sizes.\nThe smallest four are trained on either English-only or multilingual data.\nThe largest checkpoints are multilingual only. All ten of the pre-trained checkpoints \nare available on the [Hugging Face Hub](https://huggingface.co/models?search=openai/whisper). The \ncheckpoints are summarised in the following table with links to the models on the Hub:\n\n| Size     | Parameters | English-only                                         | Multilingual                                        |\n|"}
{"downloads": 242453, "id": "sentence-transformers/distiluse-base-multilingual-cased-v2", "likes": 45, "pipeline_tag": "sentence-similarity", "task": "sentence-similarity", "meta": {"pipeline_tag": "sentence-similarity", "language": "multilingual", "license": "apache-2.0", "tags": ["sentence-transformers", "feature-extraction", "sentence-similarity", "transformers"]}, "description": "\n\n# sentence-transformers/distiluse-base-multilingual-cased-v2\n\nThis is a [sentence-transformers](https://www.SBERT.net) model: It maps sentences & paragraphs to a 512 dimensional dense vector space and can be used for tasks like clustering or semantic search.\n\n\n\n## Usage (Sentence-Transformers)\n\nUsing this model becomes easy when you have [sentence-transformers](https://www.SBERT.net) installed:\n\n```\npip install -U sentence-transformers\n```\n\nThen you can use the model like this:\n\n```python\nfrom sentence_transformers import SentenceTransformer\nsentences = [\"This is an example sentence\", \"Each sentence is converted\"]\n\nmodel = SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased-v2')\nembeddings = model.encode(sentences)\nprint(embeddings)\n```\n\n\n\n## Evaluation Results\n\n\n\nFor an automated evaluation of this model, see the *Sentence Embeddings Benchmark*: [https://seb.sbert.net](https://seb.sbert.net?model_name=sentence-transformers/distiluse-base-multilingual-cased-v2)\n\n\n\n## Full Model Architecture\n```\nSentenceTransformer(\n  (0): Transformer({'max_seq_length': 128, 'do_lower_case': False}) with Transformer model: DistilBertModel \n  (1): Pooling({'word_embedding_dimension': 768, 'pooling_mode_cls_token': False, 'pooling_mode_mean_tokens': True, 'pooling_mode_max_tokens': False, 'pooling_mode_mean_sqrt_len_tokens': False})\n  (2): Dense({'in_features': 768, 'out_features': 512, 'bias': True, 'activation_function': 'torch.nn.modules.activation.Tanh'})\n)\n```\n\n## Citing & Authors\n\nThis model was trained by [sentence-transformers](https://www.sbert.net/). \n        \nIf you find this model helpful, feel free to cite our publication [Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks](https://arxiv.org/abs/1908.10084):\n```bibtex \n@inproceedings{reimers-2019-sentence-bert,\n    title = \"Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks\",\n    author = \"Reimers, Nils and Gurevych, Iryna\",\n    booktitle = \"Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing\",\n    month = \"11\",\n    year = \"2019\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"http://arxiv.org/abs/1908.10084\",\n}\n```"}
{"downloads": 1607, "id": "speechbrain/lang-id-voxlingua107-ecapa", "likes": 22, "pipeline_tag": "audio-classification", "task": "audio-classification", "meta": {"language": ["multilingual", "ab", "af", "am", "ar", "as", "az", "ba", "be", "bg", "bi", "bo", "br", "bs", "ca", "ceb", "cs", "cy", "da", "de", "el", "en", "eo", "es", "et", "eu", "fa", "fi", "fo", "fr", "gl", "gn", "gu", "gv", "ha", "haw", "hi", "hr", "ht", "hu", "hy", "ia", "id", "is", "it", "he", "ja", "jv", "ka", "kk", "km", "kn", "ko", "la", "lm", "ln", "lo", "lt", "lv", "mg", "mi", "mk", "ml", "mn", "mr", "ms", "mt", "my", "ne", "nl", "nn", false, "oc", "pa", "pl", "ps", "pt", "ro", "ru", "sa", "sco", "sd", "si", "sk", "sl", "sn", "so", "sq", "sr", "su", "sv", "sw", "ta", "te", "tg", "th", "tk", "tl", "tr", "tt", "uk", "ud", "uz", "vi", "war", "yi", "yo", "zh"], "thumbnail": null, "tags": ["audio-classification", "speechbrain", "embeddings", "Language", "Identification", "pytorch", "ECAPA-TDNN", "TDNN", "VoxLingua107"], "license": "apache-2.0", "datasets": ["VoxLingua107"], "metrics": ["Accuracy"], "widget": [{"example_title": "English Sample", "src": "https://cdn-media.huggingface.co/speech_samples/LibriSpeech_61-70968-0000.flac"}]}, "description": "\n\n# VoxLingua107 ECAPA-TDNN Spoken Language Identification Model\n\n## Model description\n\nThis is a spoken language recognition model trained on the VoxLingua107 dataset using SpeechBrain.\nThe model uses the ECAPA-TDNN architecture that has previously been used for speaker recognition. However, it uses\nmore fully connected hidden layers after the embedding layer, and cross-entropy loss was used for training. \nWe observed that this improved the performance of extracted utterance embeddings for downstream tasks.\n\nThe system is trained with recordings sampled at 16kHz (single channel).\nThe code will automatically normalize your audio (i.e., resampling + mono channel selection) when calling *classify_file* if needed.\n\nThe model can classify a speech utterance according to the language spoken.\nIt covers 107 different languages (\nAbkhazian, \nAfrikaans, \nAmharic, \nArabic, \nAssamese, \nAzerbaijani, \nBashkir, \nBelarusian, \nBulgarian, \nBengali, \nTibetan, \nBreton, \nBosnian, \nCatalan, \nCebuano, \nCzech, \nWelsh, \nDanish, \nGerman, \nGreek, \nEnglish, \nEsperanto, \nSpanish, \nEstonian, \nBasque, \nPersian, \nFinnish, \nFaroese, \nFrench, \nGalician, \nGuarani, \nGujarati, \nManx, \nHausa, \nHawaiian, \nHindi, \nCroatian, \nHaitian, \nHungarian, \nArmenian, \nInterlingua, \nIndonesian, \nIcelandic, \nItalian, \nHebrew, \nJapanese, \nJavanese, \nGeorgian, \nKazakh, \nCentral Khmer, \nKannada, \nKorean, \nLatin, \nLuxembourgish, \nLingala, \nLao, \nLithuanian, \nLatvian, \nMalagasy, \nMaori, \nMacedonian, \nMalayalam, \nMongolian, \nMarathi, \nMalay, \nMaltese, \nBurmese, \nNepali, \nDutch, \nNorwegian Nynorsk, \nNorwegian, \nOccitan, \nPanjabi, \nPolish, \nPushto, \nPortuguese, \nRomanian, \nRussian, \nSanskrit, \nScots, \nSindhi, \nSinhala, \nSlovak, \nSlovenian, \nShona, \nSomali, \nAlbanian, \nSerbian, \nSundanese, \nSwedish, \nSwahili, \nTamil, \nTelugu, \nTajik, \nThai, \nTurkmen, \nTagalog, \nTurkish, \nTatar, \nUkrainian, \nUrdu, \nUzbek, \nVietnamese, \nWaray, \nYiddish, \nYoruba, \nMandarin Chinese).\n\n## Intended uses & limitations\n\nThe model has two uses:\n\n  - use 'as is' for spoken language recognition\n  - use as an utterance-level feature (embedding) extractor, for creating a dedicated language ID model on your own data\n  \nThe model is trained on automatically collected YouTube data. For more \ninformation about the dataset, see [here](http://bark.phon.ioc.ee/voxlingua107/).\n\n\n#### How to use\n\n```python\nimport torchaudio\nfrom speechbrain.pretrained import EncoderClassifier\nlanguage_id = EncoderClassifier.from_hparams(source=\"speechbrain/lang-id-voxlingua107-ecapa\", savedir=\"tmp\")\n# Download Thai language sample from Omniglot and cvert to suitable form\nsignal = language_id.load_audio(\"https://omniglot.com/soundfiles/udhr/udhr_th.mp3\")\nprediction =  language_id.classify_batch(signal)\nprint(prediction)\n#  (tensor([[-2.8646e+01, -3.0346e+01, -2.0748e+01, -2.9562e+01, -2.2187e+01,\n#         -3.2668e+01, -3.6677e+01, -3.3573e+01, -3.2545e+01, -2.4365e+01,\n#         -2.4688e+01, -3.1171e+01, -2.7743e+01, -2.9918e+01, -2.4770e+01,\n#         -3.2250e+01, -2.4727e+01, -2.6087e+01, -2.1870e+01, -3.2821e+01,\n#         -2.2128e+01, -2.2822e+01, -3.0888e+01, -3.3564e+01, -2.9906e+01,\n#         -2.2392e+01, -2.5573e+01, -2.6443e+01, -3.2429e+01, -3.2652e+01,\n#         -3.0030e+01, -2.4607e+01, -2.2967e+01, -2.4396e+01, -2.8578e+01,\n#         -2.5153e+01, -2.8475e+01, -2.6409e+01, -2.5230e+01, -2.7957e+01,\n#         -2.6298e+01, -2.3609e+01, -2.5863e+01, -2.8225e+01, -2.7225e+01,\n#         -3.0486e+01, -2.1185e+01, -2.7938e+01, -3.3155e+01, -1.9076e+01,\n#         -2.9181e+01, -2.2160e+01, -1.8352e+01, -2.5866e+01, -3.3636e+01,\n#         -4.2016e+00, -3.1581e+01, -3.1894e+01, -2.7834e+01, -2.5429e+01,\n#         -3.2235e+01, -3.2280e+01, -2.8786e+01, -2.3366e+01, -2.6047e+01,\n#         -2.2075e+01, -2.3770e+01, -2.2518e+01, -2.8101e+01, -2.5745e+01,\n#         -2.6441e+01, -2.9822e+01, -2.7109e+01, -3.0225e+01, -2.4566e+01,\n#         -2.9268e+01, -2.7651e+01, -3.4221e+01, -2.9026e+01, -2.6009e+01,\n#         -3.1968e+01, -3.1747e+01, -2.8156e+01, -2.9025e+01, -2.7756e+01,\n#         -2.8052e+01, -2.9341e+01, -2.8806e+01, -2.1636e+01, -2.3992e+01,\n#         -2.3794e+01, -3.3743e+01, -2.8332e+01, -2.7465e+01, -1.5085e-02,\n#         -2.9094e+01, -2.1444e+01, -2.9780e+01, -3.6046e+01, -3.7401e+01,\n#         -3.0888e+01, -3.3172e+01, -1.8931e+01, -2.2679e+01, -3.0225e+01,\n#         -2.4995e+01, -2.1028e+01]]), tensor([-0.0151]), tensor([94]), ['th'])\n# The scores in the prediction[0] tensor can be interpreted as log-likelihoods that\n# the given utterance belongs to the given language (i.e., the larger the better)\n# The linear-scale likelihood can be retrieved using the following:\nprint(prediction[1].exp())\n#  tensor([0.9850])\n# The identified language ISO code is given in prediction[3]\nprint(prediction[3])\n#  ['th: Thai']\n  \n# Alternatively, use the utterance embedding extractor:\nemb =  language_id.encode_batch(signal)\nprint(emb.shape)\n# torch.Size([1, 1, 256])\n```\nTo perform inference on the GPU, add  `run_opts={\"device\":\"cuda\"}`  when calling the `from_hparams` method.\n\nThe system is trained with recordings sampled at 16kHz (single channel).\nThe code will automatically normalize your audio (i.e., resampling + mono channel selection) when calling *classify_file* if needed. Make sure your input tensor is compliant with the expected sampling rate if you use *encode_batch* and *classify_batch*.\n\n#### Limitations and bias\n\nSince the model is trained on VoxLingua107, it has many limitations and biases, some of which are:\n\n - Probably it's accuracy on smaller languages  is quite limited\n - Probably it works worse on female speech than male speech (because YouTube data includes much more male speech)\n - Based on subjective experiments, it doesn't work well on speech with a foreign accent\n - Probably it doesn't work well on children's speech and on persons with speech disorders\n\n\n## Training data\n\nThe model is trained on [VoxLingua107](http://bark.phon.ioc.ee/voxlingua107/).\n\nVoxLingua107 is a speech dataset for training spoken language identification models. \nThe dataset consists of short speech segments automatically extracted from YouTube videos and labeled according the language of the video title and description, with some post-processing steps to filter out false positives.\n\nVoxLingua107 contains data for 107 languages. The total amount of speech in the training set is 6628 hours. \nThe average amount of data per language is 62 hours. However, the real amount per language varies a lot. There is also a seperate development set containing 1609 speech segments from 33 languages, validated by at least two volunteers to really contain the given language.\n\n## Training procedure\n\nSee the [SpeechBrain recipe](https://github.com/speechbrain/speechbrain/tree/voxlingua107/recipes/VoxLingua107/lang_id).\n\n## Evaluation results\n\nError rate: 6.7% on the VoxLingua107 development dataset\n\n#### Referencing SpeechBrain\n```bibtex\n@misc{speechbrain,\n  title={{SpeechBrain}: A General-Purpose Speech Toolkit},\n  author={Mirco Ravanelli and Titouan Parcollet and Peter Plantinga and Aku Rouhe and Samuele Cornell and Loren Lugosch and Cem Subakan and Nauman Dawalatabad and Abdelwahab Heba and Jianyuan Zhong and Ju-Chieh Chou and Sung-Lin Yeh and Szu-Wei Fu and Chien-Feng Liao and Elena Rastorgueva and Fran\u00e7ois Grondin and William Aris and Hwidong Na and Yan Gao and Renato De Mori and Yoshua Bengio},\n  year={2021},\n  eprint={2106.04624},\n  archivePrefix={arXiv},\n  primaryClass={eess.AS},\n  note={arXiv:2106.04624}\n}\n```\n\n### Referencing VoxLingua107\n\n```bibtex\n@inproceedings{valk2021slt,\n  title={{VoxLingua107}: a Dataset for Spoken Language Recognition},\n  author={J{\\\"o}rgen Valk and Tanel Alum{\\\"a}e},\n  booktitle={Proc. IEEE SLT Workshop},\n  year={2021},\n}\n```\n\n#### About SpeechBrain\nSpeechBrain is an open-source and all-in-one speech toolkit. It is designed to be simple, extremely flexible, and user-friendly. Competitive or state-of-the-art performance is obtained in various domains.\nWebsite: https://speechbrain.github.io/\nGitHub: https://github.com/speechbrain/speechbrain\n"}
{"downloads": 18508, "id": "facebook/nllb-200-3.3B", "likes": 30, "pipeline_tag": "translation", "task": "translation", "meta": {"language": ["ace", "acm", "acq", "aeb", "af", "ajp", "ak", "als", "am", "apc", "ar", "ars", "ary", "arz", "as", "ast", "awa", "ayr", "azb", "azj", "ba", "bm", "ban", "be", "bem", "bn", "bho", "bjn", "bo", "bs", "bug", "bg", "ca", "ceb", "cs", "cjk", "ckb", "crh", "cy", "da", "de", "dik", "dyu", "dz", "el", "en", "eo", "et", "eu", "ee", "fo", "fj", "fi", "fon", "fr", "fur", "fuv", "gaz", "gd", "ga", "gl", "gn", "gu", "ht", "ha", "he", "hi", "hne", "hr", "hu", "hy", "ig", "ilo", "id", "is", "it", "jv", "ja", "kab", "kac", "kam", "kn", "ks", "ka", "kk", "kbp", "kea", "khk", "km", "ki", "rw", "ky", "kmb", "kmr", "knc", "kg", "ko", "lo", "lij", "li", "ln", "lt", "lmo", "ltg", "lb", "lua", "lg", "luo", "lus", "lvs", "mag", "mai", "ml", "mar", "min", "mk", "mt", "mni", "mos", "mi", "my", "nl", "nn", "nb", "npi", "nso", "nus", "ny", "oc", "ory", "pag", "pa", "pap", "pbt", "pes", "plt", "pl", "pt", "prs", "quy", "ro", "rn", "ru", "sg", "sa", "sat", "scn", "shn", "si", "sk", "sl", "sm", "sn", "sd", "so", "st", "es", "sc", "sr", "ss", "su", "sv", "swh", "szl", "ta", "taq", "tt", "te", "tg", "tl", "th", "ti", "tpi", "tn", "ts", "tk", "tum", "tr", "tw", "tzm", "ug", "uk", "umb", "ur", "uzn", "vec", "vi", "war", "wo", "xh", "ydd", "yo", "yue", "zh", "zsm", "zu"], "language_details": "ace_Arab, ace_Latn, acm_Arab, acq_Arab, aeb_Arab, afr_Latn, ajp_Arab, aka_Latn, amh_Ethi, apc_Arab, arb_Arab, ars_Arab, ary_Arab, arz_Arab, asm_Beng, ast_Latn, awa_Deva, ayr_Latn, azb_Arab, azj_Latn, bak_Cyrl, bam_Latn, ban_Latn,bel_Cyrl, bem_Latn, ben_Beng, bho_Deva, bjn_Arab, bjn_Latn, bod_Tibt, bos_Latn, bug_Latn, bul_Cyrl, cat_Latn, ceb_Latn, ces_Latn, cjk_Latn, ckb_Arab, crh_Latn, cym_Latn, dan_Latn, deu_Latn, dik_Latn, dyu_Latn, dzo_Tibt, ell_Grek, eng_Latn, epo_Latn, est_Latn, eus_Latn, ewe_Latn, fao_Latn, pes_Arab, fij_Latn, fin_Latn, fon_Latn, fra_Latn, fur_Latn, fuv_Latn, gla_Latn, gle_Latn, glg_Latn, grn_Latn, guj_Gujr, hat_Latn, hau_Latn, heb_Hebr, hin_Deva, hne_Deva, hrv_Latn, hun_Latn, hye_Armn, ibo_Latn, ilo_Latn, ind_Latn, isl_Latn, ita_Latn, jav_Latn, jpn_Jpan, kab_Latn, kac_Latn, kam_Latn, kan_Knda, kas_Arab, kas_Deva, kat_Geor, knc_Arab, knc_Latn, kaz_Cyrl, kbp_Latn, kea_Latn, khm_Khmr, kik_Latn, kin_Latn, kir_Cyrl, kmb_Latn, kon_Latn, kor_Hang, kmr_Latn, lao_Laoo, lvs_Latn, lij_Latn, lim_Latn, lin_Latn, lit_Latn, lmo_Latn, ltg_Latn, ltz_Latn, lua_Latn, lug_Latn, luo_Latn, lus_Latn, mag_Deva, mai_Deva, mal_Mlym, mar_Deva, min_Latn, mkd_Cyrl, plt_Latn, mlt_Latn, mni_Beng, khk_Cyrl, mos_Latn, mri_Latn, zsm_Latn, mya_Mymr, nld_Latn, nno_Latn, nob_Latn, npi_Deva, nso_Latn, nus_Latn, nya_Latn, oci_Latn, gaz_Latn, ory_Orya, pag_Latn, pan_Guru, pap_Latn, pol_Latn, por_Latn, prs_Arab, pbt_Arab, quy_Latn, ron_Latn, run_Latn, rus_Cyrl, sag_Latn, san_Deva, sat_Beng, scn_Latn, shn_Mymr, sin_Sinh, slk_Latn, slv_Latn, smo_Latn, sna_Latn, snd_Arab, som_Latn, sot_Latn, spa_Latn, als_Latn, srd_Latn, srp_Cyrl, ssw_Latn, sun_Latn, swe_Latn, swh_Latn, szl_Latn, tam_Taml, tat_Cyrl, tel_Telu, tgk_Cyrl, tgl_Latn, tha_Thai, tir_Ethi, taq_Latn, taq_Tfng, tpi_Latn, tsn_Latn, tso_Latn, tuk_Latn, tum_Latn, tur_Latn, twi_Latn, tzm_Tfng, uig_Arab, ukr_Cyrl, umb_Latn, urd_Arab, uzn_Latn, vec_Latn, vie_Latn, war_Latn, wol_Latn, xho_Latn, ydd_Hebr, yor_Latn, yue_Hant, zho_Hans, zho_Hant, zul_Latn", "tags": ["nllb", "translation"], "license": "cc-by-nc-4.0", "datasets": ["flores-200"], "metrics": ["bleu", "spbleu", "chrf++"], "inference": false}, "description": "\n\n# NLLB-200\n\nThis is the model card of NLLB-200's 3.3B variant.\n\nHere are the [metrics](https://tinyurl.com/nllb200dense3bmetrics) for that particular checkpoint.\n\n- Information about training algorithms, parameters, fairness constraints or other applied approaches, and features. The exact training algorithm, data and the strategies to handle data imbalances for high and low resource languages that were used to train NLLB-200 is described in the paper.\n- Paper or other resource for more information NLLB Team et al, No Language Left Behind: Scaling Human-Centered Machine Translation, Arxiv, 2022\n- License: CC-BY-NC\n- Where to send questions or comments about the model: https://github.com/facebookresearch/fairseq/issues\n\n\n\n## Intended Use\n- Primary intended uses: NLLB-200 is a machine translation model primarily intended for research in machine translation, - especially for low-resource languages. It allows for single sentence translation among 200 languages. Information on how to - use the model can be found in Fairseq code repository along with the training code and references to evaluation and training data.\n- Primary intended users: Primary users are researchers and machine translation research community.\n- Out-of-scope use cases: NLLB-200 is a research model and is not released for production deployment. NLLB-200 is trained on general domain text data and is not intended to be used with domain specific texts, such as medical domain or legal domain. The model is not intended to be used for document translation. The model was trained with input lengths not exceeding 512 tokens, therefore translating longer sequences might result in quality degradation. NLLB-200 translations can not be used as certified translations. \n\n## Metrics\n\u2022 Model performance measures: NLLB-200 model was evaluated using BLEU, spBLEU, and chrF++ metrics widely adopted by machine translation community. Additionally, we performed human evaluation with the XSTS protocol and measured the toxicity of the generated translations.\n\n\n## Evaluation Data\n- Datasets: Flores-200 dataset is described in Section 4\n- Motivation: We used Flores-200 as it provides full evaluation coverage of the languages in NLLB-200\n- Preprocessing: Sentence-split raw text data was preprocessed using SentencePiece. The\nSentencePiece model is released along with NLLB-200.\n\n## Training Data\n\u2022 We used parallel multilingual data from a variety of sources to train the model. We provide detailed report on data selection and construction process in Section 5 in the paper. We also used monolingual data constructed from Common Crawl. We provide more details in Section 5.2.\n\n## Ethical Considerations\n\u2022 In this work, we took a reflexive approach in technological development to ensure that we prioritize human users and minimize risks that could be transferred to them. While we reflect on our ethical considerations throughout the article, here are some additional points to highlight. For one, many languages chosen for this study are low-resource languages, with a heavy emphasis on African languages. While quality translation could improve education and information access in many in these communities, such an access could also make groups with lower levels of digital literacy more vulnerable to misinformation or online scams. The latter scenarios could arise if bad actors misappropriate our work for nefarious activities, which we conceive as an example of unintended use. Regarding data acquisition, the training data used for model development were mined from various publicly available sources on the web. Although we invested heavily in data cleaning, personally identifiable information may not be entirely eliminated. Finally, although we did our best to optimize for translation quality, mistranslations produced by the model could remain. Although the odds are low, this could have adverse impact on those who rely on these translations to make important decisions (particularly when related to health and safety).\n\n## Caveats and Recommendations\n\u2022 Our model has been tested on the Wikimedia domain with limited investigation on other domains supported in NLLB-MD. In addition, the supported languages may have variations that our model is not capturing. Users should make appropriate assessments.\n\n## Carbon Footprint Details\n\u2022 The carbon dioxide (CO2e) estimate is reported in Section 8.8."}
{"downloads": 18814, "id": "bigscience/bloomz", "likes": 284, "pipeline_tag": "text-generation", "task": "text-generation", "meta": {"datasets": ["bigscience/xP3"], "license": "bigscience-bloom-rail-1.0", "language": ["ak", "ar", "as", "bm", "bn", "ca", "code", "en", "es", "eu", "fon", "fr", "gu", "hi", "id", "ig", "ki", "kn", "lg", "ln", "ml", "mr", "ne", "nso", "ny", "or", "pa", "pt", "rn", "rw", "sn", "st", "sw", "ta", "te", "tn", "ts", "tum", "tw", "ur", "vi", "wo", "xh", "yo", "zh", "zu"], "programming_language": ["C", "C++", "C#", "Go", "Java", "JavaScript", "Lua", "PHP", "Python", "Ruby", "Rust", "Scala", "TypeScript"], "pipeline_tag": "text-generation", "inference": true, "widget": [{"text": "\u4e00\u4e2a\u4f20\u5947\u7684\u5f00\u7aef\uff0c\u4e00\u4e2a\u4e0d\u706d\u7684\u795e\u8bdd\uff0c\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u4e00\u90e8\u7535\u5f71\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u8d70\u8fdb\u65b0\u65f6\u4ee3\u7684\u6807\u7b7e\uff0c\u6c38\u8fdc\u5f6a\u70b3\u53f2\u518c\u3002Would you rate the previous review as positive, neutral or negative?", "example_title": "zh-en sentiment"}, {"text": "\u4e00\u4e2a\u4f20\u5947\u7684\u5f00\u7aef\uff0c\u4e00\u4e2a\u4e0d\u706d\u7684\u795e\u8bdd\uff0c\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u4e00\u90e8\u7535\u5f71\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u8d70\u8fdb\u65b0\u65f6\u4ee3\u7684\u6807\u7b7e\uff0c\u6c38\u8fdc\u5f6a\u70b3\u53f2\u518c\u3002\u4f60\u8ba4\u4e3a\u8fd9\u53e5\u8bdd\u7684\u7acb\u573a\u662f\u8d5e\u626c\u3001\u4e2d\u7acb\u8fd8\u662f\u6279\u8bc4\uff1f", "example_title": "zh-zh sentiment"}, {"text": "Suggest at least five related search terms to \"M\u1ea1ng neural nh\u00e2n t\u1ea1o\".", "example_title": "vi-en query"}, {"text": "Proposez au moins cinq mots cl\u00e9s concernant \u00abR\u00e9seau de neurones artificiels\u00bb.", "example_title": "fr-fr query"}, {"text": "Explain in a sentence in Telugu what is backpropagation in neural networks.", "example_title": "te-en qa"}, {"text": "Why is the sky blue?", "example_title": "en-en qa"}, {"text": "Explain to me in Traditional Chinese what is the difference between Bitcoin and Ethereum.", "example_title": "zh-en qa"}, {"text": "Write a code snippet with O(log(n)) computational complexity.", "example_title": "code-en"}, {"text": "Write a fairy tale about a troll saving a princess from a dangerous dragon. The fairy tale is a masterpiece that has achieved praise worldwide and its moral is \"Heroes Come in All Shapes and Sizes\". Story (in Spanish):", "example_title": "es-en fable"}, {"text": "Write a fable about wood elves living in a forest that is suddenly invaded by ogres. The fable is a masterpiece that has achieved praise worldwide and its moral is \"Violence is the last refuge of the incompetent\". Fable (in Hindi):", "example_title": "hi-en fable"}, {"text": "How many sides does a rectangle and heptagon have, when combined? Answer this question with some math. Ein Rechteck hat 4 Seiten. Ein Siebeneck hat 7 Seiten. In Kombination haben sie 4 + 7 = 11 Seiten. \u0643\u0645 \u0639\u062f\u062f \u0627\u0644\u0623\u0636\u0644\u0627\u0639 \u0627\u0644\u062a\u064a \u064a\u062c\u0645\u0639\u0647\u0627 \u0627\u0644\u0645\u0631\u0628\u0639 \u0648\u0627\u0644\u0645\u062b\u0644\u062b\u061f R\u00e9pondez \u00e0 cette question en chinois.", "example_title": "en-de-ar-fr-zh math"}], "model-index": [{"name": "bloomz", "results": [{"task": {"type": "Coreference resolution"}, "dataset": {"type": "winogrande", "name": "Winogrande XL (xl)", "config": "xl", "split": "validation", "revision": "a80f460359d1e9a67c006011c94de42a8759430c"}, "metrics": [{"type": "Accuracy", "value": 59.27}]}, {"task": {"type": "Coreference resolution"}, "dataset": {"type": "Muennighoff/xwinograd", "name": "XWinograd (en)", "config": "en", "split": "test", "revision": "9dd5ea5505fad86b7bedad667955577815300cee"}, "metrics": [{"type": "Accuracy", "value": 69.08}]}, {"task": {"type": "Coreference resolution"}, "dataset": {"type": "Muennighoff/xwinograd", "name": "XWinograd (fr)", "config": "fr", "split": "test", "revision": "9dd5ea5505fad86b7bedad667955577815300cee"}, "metrics": [{"type": "Accuracy", "value": 68.67}]}, {"task": {"type": "Coreference resolution"}, "dataset": {"type": "Muennighoff/xwinograd", "name": "XWinograd (jp)", "config": "jp", "split": "test", "revision": "9dd5ea5505fad86b7bedad667955577815300cee"}, "metrics": [{"type": "Accuracy", "value": 59.65}]}, {"task": {"type": "Coreference resolution"}, "dataset": {"type": "Muennighoff/xwinograd", "name": "XWinograd (pt)", "config": "pt", "split": "test", "revision": "9dd5ea5505fad86b7bedad667955577815300cee"}, "metrics": [{"type": "Accuracy", "value": 64.26}]}, {"task": {"type": "Coreference resolution"}, "dataset": {"type": "Muennighoff/xwinograd", "name": "XWinograd (ru)", "config": "ru", "split": "test", "revision": "9dd5ea5505fad86b7bedad667955577815300cee"}, "metrics": [{"type": "Accuracy", "value": 60.95}]}, {"task": {"type": "Coreference resolution"}, "dataset": {"type": "Muennighoff/xwinograd", "name": "XWinograd (zh)", "config": "zh", "split": "test", "revision": "9dd5ea5505fad86b7bedad667955577815300cee"}, "metrics": [{"type": "Accuracy", "value": 70.24}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "anli", "name": "ANLI (r1)", "config": "r1", "split": "validation", "revision": "9dbd830a06fea8b1c49d6e5ef2004a08d9f45094"}, "metrics": [{"type": "Accuracy", "value": 48.6}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "anli", "name": "ANLI (r2)", "config": "r2", "split": "validation", "revision": "9dbd830a06fea8b1c49d6e5ef2004a08d9f45094"}, "metrics": [{"type": "Accuracy", "value": 44.1}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "anli", "name": "ANLI (r3)", "config": "r3", "split": "validation", "revision": "9dbd830a06fea8b1c49d6e5ef2004a08d9f45094"}, "metrics": [{"type": "Accuracy", "value": 45.5}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "super_glue", "name": "SuperGLUE (cb)", "config": "cb", "split": "validation", "revision": "9e12063561e7e6c79099feb6d5a493142584e9e2"}, "metrics": [{"type": "Accuracy", "value": 82.14}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "super_glue", "name": "SuperGLUE (rte)", "config": "rte", "split": "validation", "revision": "9e12063561e7e6c79099feb6d5a493142584e9e2"}, "metrics": [{"type": "Accuracy", "value": 85.56}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (ar)", "config": "ar", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 60.68}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (bg)", "config": "bg", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 48.43}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (de)", "config": "de", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 54.38}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (el)", "config": "el", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 47.43}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (en)", "config": "en", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 67.47}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (es)", "config": "es", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 61.24}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (fr)", "config": "fr", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 61.37}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (hi)", "config": "hi", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 60.2}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (ru)", "config": "ru", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 54.02}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (sw)", "config": "sw", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 52.09}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (th)", "config": "th", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 43.78}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (tr)", "config": "tr", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 45.7}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (ur)", "config": "ur", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 50.8}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (vi)", "config": "vi", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 61.0}]}, {"task": {"type": "Natural language inference"}, "dataset": {"type": "xnli", "name": "XNLI (zh)", "config": "zh", "split": "validation", "revision": "a5a45e4ff92d5d3f34de70aaf4b72c3bdf9f7f16"}, "metrics": [{"type": "Accuracy", "value": 56.91}]}, {"task": {"type": "Program synthesis"}, "dataset": {"type": "openai_humaneval", "name": "HumanEval", "config": "None", "split": "test", "revision": "e8dc562f5de170c54b5481011dd9f4fa04845771"}, "metrics": [{"type": "Pass@1", "value": 12.06}, {"type": "Pass@10", "value": 26.53}, {"type": "Pass@100", "value": 48.44}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "story_cloze", "name": "StoryCloze (2016)", "config": "2016", "split": "validation", "revision": "e724c6f8cdf7c7a2fb229d862226e15b023ee4db"}, "metrics": [{"type": "Accuracy", "value": 96.26}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "super_glue", "name": "SuperGLUE (copa)", "config": "copa", "split": "validation", "revision": "9e12063561e7e6c79099feb6d5a493142584e9e2"}, "metrics": [{"type": "Accuracy", "value": 91.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "xcopa", "name": "XCOPA (et)", "config": "et", "split": "validation", "revision": "37f73c60fb123111fa5af5f9b705d0b3747fd187"}, "metrics": [{"type": "Accuracy", "value": 51.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "xcopa", "name": "XCOPA (ht)", "config": "ht", "split": "validation", "revision": "37f73c60fb123111fa5af5f9b705d0b3747fd187"}, "metrics": [{"type": "Accuracy", "value": 58.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "xcopa", "name": "XCOPA (id)", "config": "id", "split": "validation", "revision": "37f73c60fb123111fa5af5f9b705d0b3747fd187"}, "metrics": [{"type": "Accuracy", "value": 86.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "xcopa", "name": "XCOPA (it)", "config": "it", "split": "validation", "revision": "37f73c60fb123111fa5af5f9b705d0b3747fd187"}, "metrics": [{"type": "Accuracy", "value": 74.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "xcopa", "name": "XCOPA (qu)", "config": "qu", "split": "validation", "revision": "37f73c60fb123111fa5af5f9b705d0b3747fd187"}, "metrics": [{"type": "Accuracy", "value": 56.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "xcopa", "name": "XCOPA (sw)", "config": "sw", "split": "validation", "revision": "37f73c60fb123111fa5af5f9b705d0b3747fd187"}, "metrics": [{"type": "Accuracy", "value": 64.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "xcopa", "name": "XCOPA (ta)", "config": "ta", "split": "validation", "revision": "37f73c60fb123111fa5af5f9b705d0b3747fd187"}, "metrics": [{"type": "Accuracy", "value": 69.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "xcopa", "name": "XCOPA (th)", "config": "th", "split": "validation", "revision": "37f73c60fb123111fa5af5f9b705d0b3747fd187"}, "metrics": [{"type": "Accuracy", "value": 58.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "xcopa", "name": "XCOPA (tr)", "config": "tr", "split": "validation", "revision": "37f73c60fb123111fa5af5f9b705d0b3747fd187"}, "metrics": [{"type": "Accuracy", "value": 57.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "xcopa", "name": "XCOPA (vi)", "config": "vi", "split": "validation", "revision": "37f73c60fb123111fa5af5f9b705d0b3747fd187"}, "metrics": [{"type": "Accuracy", "value": 87.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "xcopa", "name": "XCOPA (zh)", "config": "zh", "split": "validation", "revision": "37f73c60fb123111fa5af5f9b705d0b3747fd187"}, "metrics": [{"type": "Accuracy", "value": 90.0}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "Muennighoff/xstory_cloze", "name": "XStoryCloze (ar)", "config": "ar", "split": "validation", "revision": "8bb76e594b68147f1a430e86829d07189622b90d"}, "metrics": [{"type": "Accuracy", "value": 92.79}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "Muennighoff/xstory_cloze", "name": "XStoryCloze (es)", "config": "es", "split": "validation", "revision": "8bb76e594b68147f1a430e86829d07189622b90d"}, "metrics": [{"type": "Accuracy", "value": 94.37}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "Muennighoff/xstory_cloze", "name": "XStoryCloze (eu)", "config": "eu", "split": "validation", "revision": "8bb76e594b68147f1a430e86829d07189622b90d"}, "metrics": [{"type": "Accuracy", "value": 86.9}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "Muennighoff/xstory_cloze", "name": "XStoryCloze (hi)", "config": "hi", "split": "validation", "revision": "8bb76e594b68147f1a430e86829d07189622b90d"}, "metrics": [{"type": "Accuracy", "value": 88.42}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "Muennighoff/xstory_cloze", "name": "XStoryCloze (id)", "config": "id", "split": "validation", "revision": "8bb76e594b68147f1a430e86829d07189622b90d"}, "metrics": [{"type": "Accuracy", "value": 92.12}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "Muennighoff/xstory_cloze", "name": "XStoryCloze (my)", "config": "my", "split": "validation", "revision": "8bb76e594b68147f1a430e86829d07189622b90d"}, "metrics": [{"type": "Accuracy", "value": 52.35}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "Muennighoff/xstory_cloze", "name": "XStoryCloze (ru)", "config": "ru", "split": "validation", "revision": "8bb76e594b68147f1a430e86829d07189622b90d"}, "metrics": [{"type": "Accuracy", "value": 81.73}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "Muennighoff/xstory_cloze", "name": "XStoryCloze (sw)", "config": "sw", "split": "validation", "revision": "8bb76e594b68147f1a430e86829d07189622b90d"}, "metrics": [{"type": "Accuracy", "value": 79.81}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "Muennighoff/xstory_cloze", "name": "XStoryCloze (te)", "config": "te", "split": "validation", "revision": "8bb76e594b68147f1a430e86829d07189622b90d"}, "metrics": [{"type": "Accuracy", "value": 81.2}]}, {"task": {"type": "Sentence completion"}, "dataset": {"type": "Muennighoff/xstory_cloze", "name": "XStoryCloze (zh)", "config": "zh", "split": "validation", "revision": "8bb76e594b68147f1a430e86829d07189622b90d"}, "metrics": [{"type": "Accuracy", "value": 93.12}]}]}]}, "description": "\n\n![xmtf](https://github.com/bigscience-workshop/xmtf/blob/master/xmtf_banner.png?raw=true)\n\n#  Table of Contents\n\n1. [Model Summary](#model-summary)\n2. [Use](#use)\n3. [Limitations](#limitations)\n4. [Training](#training)\n5. [Evaluation](#evaluation)\n7. [Citation](#citation)\n\n# Model Summary\n\n> We present BLOOMZ & mT0, a family of models capable of following human instructions in dozens of languages zero-shot. We finetune BLOOM & mT5 pretrained multilingual language models on our crosslingual task mixture (xP3) and find the resulting models capable of crosslingual generalization to unseen tasks & languages.\n\n- **Repository:** [bigscience-workshop/xmtf](https://github.com/bigscience-workshop/xmtf)\n- **Paper:** [Crosslingual Generalization through Multitask Finetuning](https://arxiv.org/abs/2211.01786)\n- **Point of Contact:** [Niklas Muennighoff](mailto:niklas@hf.co)\n- **Languages:** Refer to [bloom](https://huggingface.co/bigscience/bloom) for pretraining & [xP3](https://huggingface.co/datasets/bigscience/xP3) for finetuning language proportions. It understands both pretraining & finetuning languages.\n- **BLOOMZ & mT0 Model Family:**\n\n<div class=\"max-w-full overflow-auto\">\n<table>\n  <tr>\n<th colspan=\"12\">Multitask finetuned on <a style=\"font-weight:bold\" href=https://huggingface.co/datasets/bigscience/xP3>xP3</a>. Recommended for prompting in English.\n</tr>\n<tr>\n<td>Parameters</td>\n<td>300M</td>\n<td>580M</td>\n<td>1.2B</td>\n<td>3.7B</td>\n<td>13B</td>\n<td>560M</td>\n<td>1.1B</td>\n<td>1.7B</td>\n<td>3B</td>\n<td>7.1B</td>\n<td>176B</td>\n</tr>\n<tr>\n<td>Finetuned Model</td>\n<td><a href=https://huggingface.co/bigscience/mt0-small>mt0-small</a></td>  \n<td><a href=https://huggingface.co/bigscience/mt0-base>mt0-base</a></td>\n<td><a href=https://huggingface.co/bigscience/mt0-large>mt0-large</a></td>\n<td><a href=https://huggingface.co/bigscience/mt0-xl>mt0-xl</a></td>\n<td><a href=https://huggingface.co/bigscience/mt0-xxl>mt0-xxl</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-560m>bloomz-560m</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-1b1>bloomz-1b1</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-1b7>bloomz-1b7</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-3b>bloomz-3b</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-7b1>bloomz-7b1</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz>bloomz</a></td>\n</tr>\n</tr>\n  <tr>\n<th colspan=\"12\">Multitask finetuned on <a style=\"font-weight:bold\" href=https://huggingface.co/datasets/bigscience/xP3mt>xP3mt</a>. Recommended for prompting in non-English.</th>\n</tr>\n<tr>\n<td>Finetuned Model</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td><a href=https://huggingface.co/bigscience/mt0-xxl-mt>mt0-xxl-mt</a></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-7b1-mt>bloomz-7b1-mt</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-mt>bloomz-mt</a></td>\n</tr>\n<th colspan=\"12\">Multitask finetuned on <a style=\"font-weight:bold\" href=https://huggingface.co/datasets/Muennighoff/P3>P3</a>. Released for research purposes only. Strictly inferior to above models!</th>\n</tr>\n<tr>\n<td>Finetuned Model</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td><a href=https://huggingface.co/bigscience/mt0-xxl-p3>mt0-xxl-p3</a></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-7b1-p3>bloomz-7b1-p3</a></td>\n<td><a href=https://huggingface.co/bigscience/bloomz-p3>bloomz-p3</a></td>\n</tr>\n<th colspan=\"12\">Original pretrained checkpoints. Not recommended.</th>\n<tr>\n<td>Pretrained Model</td>\n<td><a href=https://huggingface.co/google/mt5-small>mt5-small</a></td>  \n<td><a href=https://huggingface.co/google/mt5-base>mt5-base</a></td>\n<td><a href=https://huggingface.co/google/mt5-large>mt5-large</a></td>\n<td><a href=https://huggingface.co/google/mt5-xl>mt5-xl</a></td>\n<td><a href=https://huggingface.co/google/mt5-xxl>mt5-xxl</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom-560m>bloom-560m</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom-1b1>bloom-1b1</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom-1b7>bloom-1b7</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom-3b>bloom-3b</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom-7b1>bloom-7b1</a></td>\n<td><a href=https://huggingface.co/bigscience/bloom>bloom</a></td>\n</tr>\n</table>\n</div>\n\n\n# Use\n\n## Intended use\n\nWe recommend using the model to perform tasks expressed in natural language. For example, given the prompt \"*Translate to English: Je t\u2019aime.*\", the model will most likely answer \"*I love you.*\". Some prompt ideas from our paper: \n- \u4e00\u4e2a\u4f20\u5947\u7684\u5f00\u7aef\uff0c\u4e00\u4e2a\u4e0d\u706d\u7684\u795e\u8bdd\uff0c\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u4e00\u90e8\u7535\u5f71\uff0c\u800c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u8d70\u8fdb\u65b0\u65f6\u4ee3\u7684\u6807\u7b7e\uff0c\u6c38\u8fdc\u5f6a\u70b3\u53f2\u518c\u3002\u4f60\u8ba4\u4e3a\u8fd9\u53e5\u8bdd\u7684\u7acb\u573a\u662f\u8d5e\u626c\u3001\u4e2d\u7acb\u8fd8\u662f\u6279\u8bc4?\n- Suggest at least five related search terms to \"M\u1ea1ng neural nh\u00e2n t\u1ea1o\".\n- Write a fairy tale about a troll saving a princess from a dangerous dragon. The fairy tale is a masterpiece that has achieved praise worldwide and its moral is \"Heroes Come in All Shapes and Sizes\". Story (in Spanish):\n- Explain in a sentence in Telugu what is backpropagation in neural networks.\n\n**Feel free to share your generations in the Community tab!**\n\n## How to use\n\n### CPU\n\n<details>\n<summary> Click to expand </summary>\n\n```python\n# pip install -q transformers\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\ncheckpoint = \"bigscience/bloomz\"\n\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\nmodel = AutoModelForCausalLM.from_pretrained(checkpoint)\n\ninputs = tokenizer.encode(\"Translate to English: Je t\u2019aime.\", return_tensors=\"pt\")\noutputs = model.generate(inputs)\nprint(tokenizer.decode(outputs[0]))\n```\n\n</details>\n\n### GPU\n\n<details>\n<summary> Click to expand </summary>\n\n```python\n# pip install -q transformers accelerate\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\ncheckpoint = \"bigscience/bloomz\"\n\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\nmodel = AutoModelForCausalLM.from_pretrained(checkpoint, torch_dtype=\"auto\", device_map=\"auto\")\n\ninputs = tokenizer.encode(\"Translate to English: Je t\u2019aime.\", return_tensors=\"pt\").to(\"cuda\")\noutputs = model.generate(inputs)\nprint(tokenizer.decode(outputs[0]))\n```\n\n</details>\n\n### GPU in 8bit\n\n<details>\n<summary> Click to expand </summary>\n\n```python\n# pip install -q transformers accelerate bitsandbytes\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\n\ncheckpoint = \"bigscience/bloomz\"\n\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\nmodel = AutoModelForCausalLM.from_pretrained(checkpoint, device_map=\"auto\", load_in_8bit=True)\n\ninputs = tokenizer.encode(\"Translate to English: Je t\u2019aime.\", return_tensors=\"pt\").to(\"cuda\")\noutputs = model.generate(inputs)\nprint(tokenizer.decode(outputs[0]))\n```\n\n</details>\n\n<!-- Necessary for whitespace -->\n###\n\n# Limitations\n\n**Prompt Engineering:** The performance may vary depending on the prompt. For BLOOMZ models, we recommend making it very clear when the input stops to avoid the model trying to continue it. For example, the prompt \"*Translate to English: Je t'aime*\" without the full stop (.) at the end, may result in the model trying to continue the French sentence. Better prompts are e.g. \"*Translate to English: Je t'aime.*\", \"*Translate to English: Je t'aime. Translation:*\" \"*What is \"Je t'aime.\" in English?*\", where it is clear for the model when it should answer. Further, we recommend providing the model as much context as possible. For example, if you want it to answer in Telugu, then tell the model, e.g. \"*Explain in a sentence in Telugu what is backpropagation in neural networks.*\".\n\n# Training\n\n## Model\n\n- **Architecture:** Same as [bloom](https://huggingface.co/bigscience/bloom), also refer to the `config.json` file\n- **Finetuning steps:** 498\n- **Finetuning tokens:** 2.09 billion\n- **Finetuning layout:** 72x pipeline parallel, 1x tensor parallel, 4x data parallel\n- **Precision:** bfloat16\n\n## Hardware\n\n- **CPUs:** AMD CPUs with 512GB memory per node\n- **GPUs:** 288 A100 80GB GPUs with 8 GPUs per node (36 nodes) using NVLink 4 inter-gpu connects, 4 OmniPath links\n- **Communication:** NCCL-communications network with a fully dedicated subnet\n\n## Software\n\n- **Orchestration:** [Megatron-DeepSpeed](https://github.com/bigscience-workshop/Megatron-DeepSpeed)\n- **Optimizer & parallelism:** [DeepSpeed](https://github.com/microsoft/DeepSpeed)\n- **Neural networks:** [PyTorch](https://github.com/pytorch/pytorch) (pytorch-1.11 w/ CUDA-11.5)\n- **FP16 if applicable:** [apex](https://github.com/NVIDIA/apex)\n\n# Evaluation\n\nWe refer to Table 7 from our [paper](https://arxiv.org/abs/2211.01786) & [bigscience/evaluation-results](https://huggingface.co/datasets/bigscience/evaluation-results) for zero-shot results on unseen tasks. The sidebar reports zero-shot performance of the best prompt per dataset config.\n\n# Citation\n```bibtex\n@misc{muennighoff2022crosslingual,\n      title={Crosslingual Generalization through Multitask Finetuning}, \n      author={Niklas Muennighoff and Thomas Wang and Lintang Sutawika and Adam Roberts and Stella Biderman and Teven Le Scao and M Saiful Bari and Sheng Shen and Zheng-Xin Yong and Hailey Schoelkopf and Xiangru Tang and Dragomir Radev and Alham Fikri Aji and Khalid Almubarak and Samuel Albanie and Zaid Alyafeai and Albert Webson and Edward Raff and Colin Raffel},\n      year={2022},\n      eprint={2211.01786},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```"}
{"downloads": 34455, "id": "openai/whisper-small", "likes": 37, "pipeline_tag": "automatic-speech-recognition", "task": "automatic-speech-recognition", "meta": {"language": ["en", "zh", "de", "es", "ru", "ko", "fr", "ja", "pt", "tr", "pl", "ca", "nl", "ar", "sv", "it", "id", "hi", "fi", "vi", "he", "uk", "el", "ms", "cs", "ro", "da", "hu", "ta", false, "th", "ur", "hr", "bg", "lt", "la", "mi", "ml", "cy", "sk", "te", "fa", "lv", "bn", "sr", "az", "sl", "kn", "et", "mk", "br", "eu", "is", "hy", "ne", "mn", "bs", "kk", "sq", "sw", "gl", "mr", "pa", "si", "km", "sn", "yo", "so", "af", "oc", "ka", "be", "tg", "sd", "gu", "am", "yi", "lo", "uz", "fo", "ht", "ps", "tk", "nn", "mt", "sa", "lb", "my", "bo", "tl", "mg", "as", "tt", "haw", "ln", "ha", "ba", "jw", "su"], "tags": ["audio", "automatic-speech-recognition", "hf-asr-leaderboard"], "widget": [{"example_title": "Librispeech sample 1", "src": "https://cdn-media.huggingface.co/speech_samples/sample1.flac"}, {"example_title": "Librispeech sample 2", "src": "https://cdn-media.huggingface.co/speech_samples/sample2.flac"}], "model-index": [{"name": "whisper-small", "results": [{"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "LibriSpeech (clean)", "type": "librispeech_asr", "config": "clean", "split": "test", "args": {"language": "en"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 3.432213777886737}]}, {"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "LibriSpeech (other)", "type": "librispeech_asr", "config": "other", "split": "test", "args": {"language": "en"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 7.628304527060248}]}, {"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "Common Voice 11.0", "type": "mozilla-foundation/common_voice_11_0", "config": "hi", "split": "test", "args": {"language": "hi"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 87.3}]}]}], "pipeline_tag": "automatic-speech-recognition", "license": "apache-2.0"}, "description": "\n\n# Whisper\n\nWhisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours \nof labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains **without** the need \nfor fine-tuning.\n\nWhisper was proposed in the paper [Robust Speech Recognition via Large-Scale Weak Supervision](https://arxiv.org/abs/2212.04356) \nby Alec Radford et al from OpenAI. The original code repository can be found [here](https://github.com/openai/whisper).\n\n**Disclaimer**: Content for this model card has partly been written by the Hugging Face team, and parts of it were \ncopied and pasted from the original model card.\n\n## Model details\n\nWhisper is a Transformer based encoder-decoder model, also referred to as a _sequence-to-sequence_ model. \nIt was trained on 680k hours of labelled speech data annotated using large-scale weak supervision. \n\nThe models were trained on either English-only data or multilingual data. The English-only models were trained \non the task of speech recognition. The multilingual models were trained on both speech recognition and speech \ntranslation. For speech recognition, the model predicts transcriptions in the *same* language as the audio. \nFor speech translation, the model predicts transcriptions to a *different* language to the audio.\n\nWhisper checkpoints come in five configurations of varying model sizes.\nThe smallest four are trained on either English-only or multilingual data.\nThe largest checkpoints are multilingual only. All ten of the pre-trained checkpoints \nare available on the [Hugging Face Hub](https://huggingface.co/models?search=openai/whisper). The \ncheckpoints are summarised in the following table with links to the models on the Hub:\n\n| Size     | Parameters | English-only                                         | Multilingual                                        |\n|"}
{"downloads": 18385, "id": "openai/whisper-medium", "likes": 45, "pipeline_tag": "automatic-speech-recognition", "task": "automatic-speech-recognition", "meta": {"language": ["en", "zh", "de", "es", "ru", "ko", "fr", "ja", "pt", "tr", "pl", "ca", "nl", "ar", "sv", "it", "id", "hi", "fi", "vi", "he", "uk", "el", "ms", "cs", "ro", "da", "hu", "ta", false, "th", "ur", "hr", "bg", "lt", "la", "mi", "ml", "cy", "sk", "te", "fa", "lv", "bn", "sr", "az", "sl", "kn", "et", "mk", "br", "eu", "is", "hy", "ne", "mn", "bs", "kk", "sq", "sw", "gl", "mr", "pa", "si", "km", "sn", "yo", "so", "af", "oc", "ka", "be", "tg", "sd", "gu", "am", "yi", "lo", "uz", "fo", "ht", "ps", "tk", "nn", "mt", "sa", "lb", "my", "bo", "tl", "mg", "as", "tt", "haw", "ln", "ha", "ba", "jw", "su"], "tags": ["audio", "automatic-speech-recognition", "hf-asr-leaderboard"], "widget": [{"example_title": "Librispeech sample 1", "src": "https://cdn-media.huggingface.co/speech_samples/sample1.flac"}, {"example_title": "Librispeech sample 2", "src": "https://cdn-media.huggingface.co/speech_samples/sample2.flac"}], "model-index": [{"name": "whisper-medium", "results": [{"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "LibriSpeech (clean)", "type": "librispeech_asr", "config": "clean", "split": "test", "args": {"language": "en"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 2.9}]}, {"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "LibriSpeech (other)", "type": "librispeech_asr", "config": "other", "split": "test", "args": {"language": "en"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 5.9}]}, {"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "Common Voice 11.0", "type": "mozilla-foundation/common_voice_11_0", "config": "hi", "split": "test", "args": {"language": "hi"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 53.87}]}]}], "pipeline_tag": "automatic-speech-recognition", "license": "apache-2.0"}, "description": "\n\n# Whisper\n\nWhisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours \nof labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains **without** the need \nfor fine-tuning.\n\nWhisper was proposed in the paper [Robust Speech Recognition via Large-Scale Weak Supervision](https://arxiv.org/abs/2212.04356) \nby Alec Radford et al from OpenAI. The original code repository can be found [here](https://github.com/openai/whisper).\n\n**Disclaimer**: Content for this model card has partly been written by the Hugging Face team, and parts of it were \ncopied and pasted from the original model card.\n\n## Model details\n\nWhisper is a Transformer based encoder-decoder model, also referred to as a _sequence-to-sequence_ model. \nIt was trained on 680k hours of labelled speech data annotated using large-scale weak supervision. \n\nThe models were trained on either English-only data or multilingual data. The English-only models were trained \non the task of speech recognition. The multilingual models were trained on both speech recognition and speech \ntranslation. For speech recognition, the model predicts transcriptions in the *same* language as the audio. \nFor speech translation, the model predicts transcriptions to a *different* language to the audio.\n\nWhisper checkpoints come in five configurations of varying model sizes.\nThe smallest four are trained on either English-only or multilingual data.\nThe largest checkpoints are multilingual only. All ten of the pre-trained checkpoints \nare available on the [Hugging Face Hub](https://huggingface.co/models?search=openai/whisper). The \ncheckpoints are summarised in the following table with links to the models on the Hub:\n\n| Size     | Parameters | English-only                                         | Multilingual                                        |\n|"}
{"downloads": 80638, "id": "Helsinki-NLP/opus-mt-mul-en", "likes": 25, "pipeline_tag": "translation", "task": "translation", "meta": {"language": ["ca", "es", "os", "eo", "ro", "fy", "cy", "is", "lb", "su", "an", "sq", "fr", "ht", "rm", "cv", "ig", "am", "eu", "tr", "ps", "af", "ny", "ch", "uk", "sl", "lt", "tk", "sg", "ar", "lg", "bg", "be", "ka", "gd", "ja", "si", "br", "mh", "km", "th", "ty", "rw", "te", "mk", "or", "wo", "kl", "mr", "ru", "yo", "hu", "fo", "zh", "ti", "co", "ee", "oc", "sn", "mt", "ts", "pl", "gl", "nb", "bn", "tt", "bo", "lo", "id", "gn", "nv", "hy", "kn", "to", "io", "so", "vi", "da", "fj", "gv", "sm", "nl", "mi", "pt", "hi", "se", "as", "ta", "et", "kw", "ga", "sv", "ln", "na", "mn", "gu", "wa", "lv", "jv", "el", "my", "ba", "it", "hr", "ur", "ce", "nn", "fi", "mg", "rn", "xh", "ab", "de", "cs", "he", "zu", "yi", "ml", "mul", "en"], "tags": ["translation"], "license": "apache-2.0"}, "description": "\n\n### mul-eng\n\n* source group: Multiple languages \n* target group: English \n*  OPUS readme: [mul-eng](https://github.com/Helsinki-NLP/Tatoeba-Challenge/tree/master/models/mul-eng/README.md)\n\n*  model: transformer\n* source language(s): abk acm ady afb afh_Latn afr akl_Latn aln amh ang_Latn apc ara arg arq ary arz asm ast avk_Latn awa aze_Latn bak bam_Latn bel bel_Latn ben bho bod bos_Latn bre brx brx_Latn bul bul_Latn cat ceb ces cha che chr chv cjy_Hans cjy_Hant cmn cmn_Hans cmn_Hant cor cos crh crh_Latn csb_Latn cym dan deu dsb dtp dws_Latn egl ell enm_Latn epo est eus ewe ext fao fij fin fkv_Latn fra frm_Latn frr fry fuc fuv gan gcf_Latn gil gla gle glg glv gom gos got_Goth grc_Grek grn gsw guj hat hau_Latn haw heb hif_Latn hil hin hnj_Latn hoc hoc_Latn hrv hsb hun hye iba ibo ido ido_Latn ike_Latn ile_Latn ilo ina_Latn ind isl ita izh jav jav_Java jbo jbo_Cyrl jbo_Latn jdt_Cyrl jpn kab kal kan kat kaz_Cyrl kaz_Latn kek_Latn kha khm khm_Latn kin kir_Cyrl kjh kpv krl ksh kum kur_Arab kur_Latn lad lad_Latn lao lat_Latn lav ldn_Latn lfn_Cyrl lfn_Latn lij lin lit liv_Latn lkt lld_Latn lmo ltg ltz lug lzh lzh_Hans mad mah mai mal mar max_Latn mdf mfe mhr mic min mkd mlg mlt mnw moh mon mri mwl mww mya myv nan nau nav nds niu nld nno nob nob_Hebr nog non_Latn nov_Latn npi nya oci ori orv_Cyrl oss ota_Arab ota_Latn pag pan_Guru pap pau pdc pes pes_Latn pes_Thaa pms pnb pol por ppl_Latn prg_Latn pus quc qya qya_Latn rap rif_Latn roh rom ron rue run rus sag sah san_Deva scn sco sgs shs_Latn shy_Latn sin sjn_Latn slv sma sme smo sna snd_Arab som spa sqi srp_Cyrl srp_Latn stq sun swe swg swh tah tam tat tat_Arab tat_Latn tel tet tgk_Cyrl tha tir tlh_Latn tly_Latn tmw_Latn toi_Latn ton tpw_Latn tso tuk tuk_Latn tur tvl tyv tzl tzl_Latn udm uig_Arab uig_Cyrl ukr umb urd uzb_Cyrl uzb_Latn vec vie vie_Hani vol_Latn vro war wln wol wuu xal xho yid yor yue yue_Hans yue_Hant zho zho_Hans zho_Hant zlm_Latn zsm_Latn zul zza\n* target language(s): eng\n* model: transformer\n* pre-processing: normalization + SentencePiece (spm32k,spm32k)\n* download original weights: [opus2m-2020-08-01.zip](https://object.pouta.csc.fi/Tatoeba-MT-models/mul-eng/opus2m-2020-08-01.zip)\n* test set translations: [opus2m-2020-08-01.test.txt](https://object.pouta.csc.fi/Tatoeba-MT-models/mul-eng/opus2m-2020-08-01.test.txt)\n* test set scores: [opus2m-2020-08-01.eval.txt](https://object.pouta.csc.fi/Tatoeba-MT-models/mul-eng/opus2m-2020-08-01.eval.txt)\n\n## Benchmarks\n\n| testset               | BLEU  | chr-F |\n|"}
{"downloads": 78535, "id": "csebuetnlp/mT5_multilingual_XLSum", "likes": 109, "pipeline_tag": "summarization", "task": "summarization", "meta": {"tags": ["summarization", "mT5"], "datasets": ["csebuetnlp/xlsum"], "language": ["am", "ar", "az", "bn", "my", "zh", "en", "fr", "gu", "ha", "hi", "ig", "id", "ja", "rn", "ko", "ky", "mr", "ne", "om", "ps", "fa", "pcm", "pt", "pa", "ru", "gd", "sr", "si", "so", "es", "sw", "ta", "te", "th", "ti", "tr", "uk", "ur", "uz", "vi", "cy", "yo"], "licenses": ["cc-by-nc-sa-4.0"], "widget": [{"text": "Videos that say approved vaccines are dangerous and cause autism, cancer or infertility are among those that will be taken down, the company said.  The policy includes the termination of accounts of anti-vaccine influencers.  Tech giants have been criticised for not doing more to counter false health information on their sites.  In July, US President Joe Biden said social media platforms were largely responsible for people's scepticism in getting vaccinated by spreading misinformation, and appealed for them to address the issue.  YouTube, which is owned by Google, said 130,000 videos were removed from its platform since last year, when it implemented a ban on content spreading misinformation about Covid vaccines.  In a blog post, the company said it had seen false claims about Covid jabs \"spill over into misinformation about vaccines in general\". The new policy covers long-approved vaccines, such as those against measles or hepatitis B.  \"We're expanding our medical misinformation policies on YouTube with new guidelines on currently administered vaccines that are approved and confirmed to be safe and effective by local health authorities and the WHO,\" the post said, referring to the World Health Organization."}], "model-index": [{"name": "csebuetnlp/mT5_multilingual_XLSum", "results": [{"task": {"type": "summarization", "name": "Summarization"}, "dataset": {"name": "xsum", "type": "xsum", "config": "default", "split": "test"}, "metrics": [{"name": "ROUGE-1", "type": "rouge", "value": 36.5002, "verified": true}, {"name": "ROUGE-2", "type": "rouge", "value": 13.934, "verified": true}, {"name": "ROUGE-L", "type": "rouge", "value": 28.9876, "verified": true}, {"name": "ROUGE-LSUM", "type": "rouge", "value": 28.9958, "verified": true}, {"name": "loss", "type": "loss", "value": 2.0674800872802734, "verified": true}, {"name": "gen_len", "type": "gen_len", "value": 26.9733, "verified": true}]}]}]}, "description": "\n\n# mT5-multilingual-XLSum\n\nThis repository contains the mT5 checkpoint finetuned on the 45 languages of [XL-Sum](https://huggingface.co/datasets/csebuetnlp/xlsum) dataset. For finetuning details and scripts,\nsee the [paper](https://aclanthology.org/2021.findings-acl.413/) and the [official repository](https://github.com/csebuetnlp/xl-sum). \n\n\n## Using this model in `transformers` (tested on 4.11.0.dev0)\n\n```python\nimport re\nfrom transformers import AutoTokenizer, AutoModelForSeq2SeqLM\n\nWHITESPACE_HANDLER = lambda k: re.sub('\\s+', ' ', re.sub('\\n+', ' ', k.strip()))\n\narticle_text = \"\"\"Videos that say approved vaccines are dangerous and cause autism, cancer or infertility are among those that will be taken down, the company said.  The policy includes the termination of accounts of anti-vaccine influencers.  Tech giants have been criticised for not doing more to counter false health information on their sites.  In July, US President Joe Biden said social media platforms were largely responsible for people's scepticism in getting vaccinated by spreading misinformation, and appealed for them to address the issue.  YouTube, which is owned by Google, said 130,000 videos were removed from its platform since last year, when it implemented a ban on content spreading misinformation about Covid vaccines.  In a blog post, the company said it had seen false claims about Covid jabs \"spill over into misinformation about vaccines in general\". The new policy covers long-approved vaccines, such as those against measles or hepatitis B.  \"We're expanding our medical misinformation policies on YouTube with new guidelines on currently administered vaccines that are approved and confirmed to be safe and effective by local health authorities and the WHO,\" the post said, referring to the World Health Organization.\"\"\"\n\nmodel_name = \"csebuetnlp/mT5_multilingual_XLSum\"\ntokenizer = AutoTokenizer.from_pretrained(model_name)\nmodel = AutoModelForSeq2SeqLM.from_pretrained(model_name)\n\ninput_ids = tokenizer(\n    [WHITESPACE_HANDLER(article_text)],\n    return_tensors=\"pt\",\n    padding=\"max_length\",\n    truncation=True,\n    max_length=512\n)[\"input_ids\"]\n\noutput_ids = model.generate(\n    input_ids=input_ids,\n    max_length=84,\n    no_repeat_ngram_size=2,\n    num_beams=4\n)[0]\n\nsummary = tokenizer.decode(\n    output_ids,\n    skip_special_tokens=True,\n    clean_up_tokenization_spaces=False\n)\n\nprint(summary)\n```\n\n## Benchmarks\n\nScores on the XL-Sum test sets are as follows:\n\nLanguage | ROUGE-1 / ROUGE-2 / ROUGE-L\n"}
{"downloads": 2509, "id": "jplu/tf-xlm-r-ner-40-lang", "likes": 15, "pipeline_tag": "token-classification", "task": "token-classification", "meta": {"language": ["multilingual", "af", "ar", "bg", "bn", "de", "el", "en", "es", "et", "eu", "fa", "fi", "fr", "he", "hi", "hu", "id", "it", "ja", "jv", "ka", "kk", "ko", "ml", "mr", "ms", "my", "nl", "pt", "ru", "sw", "ta", "te", "th", "tl", "tr", "ur", "vi", "yo", "zh"], "language_bcp47": ["fa-IR"]}, "description": "\n\n# XLM-R + NER\n\nThis model is a fine-tuned  [XLM-Roberta-base](https://arxiv.org/abs/1911.02116) over the 40 languages proposed in [XTREME](https://github.com/google-research/xtreme) from [Wikiann](https://aclweb.org/anthology/P17-1178). This is still an on-going work and the results will be updated everytime an improvement is reached. \n\nThe covered labels are:\n```\nLOC\nORG\nPER\nO\n```\n\n## Metrics on evaluation set:\n### Average over the 40 languages\nNumber of documents: 262300\n```\n           precision    recall  f1-score   support\n\n      ORG       0.81      0.81      0.81    102452\n      PER       0.90      0.91      0.91    108978\n      LOC       0.86      0.89      0.87    121868\n\nmicro avg       0.86      0.87      0.87    333298\nmacro avg       0.86      0.87      0.87    333298\n```\n\n### Afrikaans\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.89      0.88      0.88       582\n      PER       0.89      0.97      0.93       369\n      LOC       0.84      0.90      0.86       518\n\nmicro avg       0.87      0.91      0.89      1469\nmacro avg       0.87      0.91      0.89      1469\n``` \n\n### Arabic\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.83      0.84      0.84      3507\n      PER       0.90      0.91      0.91      3643\n      LOC       0.88      0.89      0.88      3604\n\nmicro avg       0.87      0.88      0.88     10754\nmacro avg       0.87      0.88      0.88     10754\n```\n\n### Basque\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      LOC       0.88      0.93      0.91      5228\n      ORG       0.86      0.81      0.83      3654\n      PER       0.91      0.91      0.91      4072\n\nmicro avg       0.89      0.89      0.89     12954\nmacro avg       0.89      0.89      0.89     12954\n```\n\n### Bengali\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.86      0.89      0.87       325\n      LOC       0.91      0.91      0.91       406\n      PER       0.96      0.95      0.95       364\n\nmicro avg       0.91      0.92      0.91      1095\nmacro avg       0.91      0.92      0.91      1095\n```\n\n### Bulgarian\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.86      0.83      0.84      3661\n      PER       0.92      0.95      0.94      4006\n      LOC       0.92      0.95      0.94      6449\n\nmicro avg       0.91      0.92      0.91     14116\nmacro avg       0.91      0.92      0.91     14116\n```\n\n### Burmese\nNumber of documents: 100\n```\n           precision    recall  f1-score   support\n\n      LOC       0.60      0.86      0.71        37\n      ORG       0.68      0.63      0.66        30\n      PER       0.44      0.44      0.44        36\n\nmicro avg       0.57      0.65      0.61       103\nmacro avg       0.57      0.65      0.60       103\n```\n\n### Chinese\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.70      0.69      0.70      4022\n      LOC       0.76      0.81      0.78      3830\n      PER       0.84      0.84      0.84      3706\n\nmicro avg       0.76      0.78      0.77     11558\nmacro avg       0.76      0.78      0.77     11558\n```\n\n### Dutch\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.87      0.87      0.87      3930\n      PER       0.95      0.95      0.95      4377\n      LOC       0.91      0.92      0.91      4813\n\nmicro avg       0.91      0.92      0.91     13120\nmacro avg       0.91      0.92      0.91     13120\n```\n\n### English\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      LOC       0.83      0.84      0.84      4781\n      PER       0.89      0.90      0.89      4559\n      ORG       0.75      0.75      0.75      4633\n\nmicro avg       0.82      0.83      0.83     13973\nmacro avg       0.82      0.83      0.83     13973\n```\n\n### Estonian\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      LOC       0.89      0.92      0.91      5654\n      ORG       0.85      0.85      0.85      3878\n      PER       0.94      0.94      0.94      4026\n\nmicro avg       0.90      0.91      0.90     13558\nmacro avg       0.90      0.91      0.90     13558\n```\n\n### Finnish\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.84      0.83      0.84      4104\n      LOC       0.88      0.90      0.89      5307\n      PER       0.95      0.94      0.94      4519\n\nmicro avg       0.89      0.89      0.89     13930\nmacro avg       0.89      0.89      0.89     13930\n```\n\n### French\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      LOC       0.90      0.89      0.89      4808\n      ORG       0.84      0.87      0.85      3876\n      PER       0.94      0.93      0.94      4249\n\nmicro avg       0.89      0.90      0.90     12933\nmacro avg       0.89      0.90      0.90     12933\n```\n\n### Georgian\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      PER       0.90      0.91      0.90      3964\n      ORG       0.83      0.77      0.80      3757\n      LOC       0.82      0.88      0.85      4894\n\nmicro avg       0.84      0.86      0.85     12615\nmacro avg       0.84      0.86      0.85     12615\n```\n\n### German\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      LOC       0.85      0.90      0.87      4939\n      PER       0.94      0.91      0.92      4452\n      ORG       0.79      0.78      0.79      4247\n\nmicro avg       0.86      0.86      0.86     13638\nmacro avg       0.86      0.86      0.86     13638\n```\n\n### Greek\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.86      0.85      0.85      3771\n      LOC       0.88      0.91      0.90      4436\n      PER       0.91      0.93      0.92      3894\n\nmicro avg       0.88      0.90      0.89     12101\nmacro avg       0.88      0.90      0.89     12101\n```\n\n### Hebrew\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      PER       0.87      0.88      0.87      4206\n      ORG       0.76      0.75      0.76      4190\n      LOC       0.85      0.85      0.85      4538\n\nmicro avg       0.83      0.83      0.83     12934\nmacro avg       0.82      0.83      0.83     12934\n```\n\n### Hindi\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.78      0.81      0.79       362\n      LOC       0.83      0.85      0.84       422\n      PER       0.90      0.95      0.92       427\n\nmicro avg       0.84      0.87      0.85      1211\nmacro avg       0.84      0.87      0.85      1211\n```\n\n### Hungarian\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      PER       0.95      0.95      0.95      4347\n      ORG       0.87      0.88      0.87      3988\n      LOC       0.90      0.92      0.91      5544\n\nmicro avg       0.91      0.92      0.91     13879\nmacro avg       0.91      0.92      0.91     13879\n```\n\n### Indonesian\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.88      0.89      0.88      3735\n      LOC       0.93      0.95      0.94      3694\n      PER       0.93      0.93      0.93      3947\n\nmicro avg       0.91      0.92      0.92     11376\nmacro avg       0.91      0.92      0.92     11376\n```\n\n### Italian\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      LOC       0.88      0.88      0.88      4592\n      ORG       0.86      0.86      0.86      4088\n      PER       0.96      0.96      0.96      4732\n\nmicro avg       0.90      0.90      0.90     13412\nmacro avg       0.90      0.90      0.90     13412\n```\n\n### Japanese\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.62      0.61      0.62      4184\n      PER       0.76      0.81      0.78      3812\n      LOC       0.68      0.74      0.71      4281\n\nmicro avg       0.69      0.72      0.70     12277\nmacro avg       0.69      0.72      0.70     12277\n```\n\n### Javanese\nNumber of documents: 100\n```\n           precision    recall  f1-score   support\n\n      ORG       0.79      0.80      0.80        46\n      PER       0.81      0.96      0.88        26\n      LOC       0.75      0.75      0.75        40\n\nmicro avg       0.78      0.82      0.80       112\nmacro avg       0.78      0.82      0.80       112\n```\n\n### Kazakh\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.76      0.61      0.68       307\n      LOC       0.78      0.90      0.84       461\n      PER       0.87      0.91      0.89       367\n\nmicro avg       0.81      0.83      0.82      1135\nmacro avg       0.81      0.83      0.81      1135\n```\n\n### Korean\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      LOC       0.86      0.89      0.88      5097\n      ORG       0.79      0.74      0.77      4218\n      PER       0.83      0.86      0.84      4014\n\nmicro avg       0.83      0.83      0.83     13329\nmacro avg       0.83      0.83      0.83     13329\n```\n\n### Malay\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.87      0.89      0.88       368\n      PER       0.92      0.91      0.91       366\n      LOC       0.94      0.95      0.95       354\n\nmicro avg       0.91      0.92      0.91      1088\nmacro avg       0.91      0.92      0.91      1088\n```\n\n### Malayalam\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.75      0.74      0.75       347\n      PER       0.84      0.89      0.86       417\n      LOC       0.74      0.75      0.75       391\n\nmicro avg       0.78      0.80      0.79      1155\nmacro avg       0.78      0.80      0.79      1155\n```\n\n### Marathi\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      PER       0.89      0.94      0.92       394\n      LOC       0.82      0.84      0.83       457\n      ORG       0.84      0.78      0.81       339\n\nmicro avg       0.85      0.86      0.85      1190\nmacro avg       0.85      0.86      0.85      1190\n```\n\n### Persian\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      PER       0.93      0.92      0.93      3540\n      LOC       0.93      0.93      0.93      3584\n      ORG       0.89      0.92      0.90      3370\n\nmicro avg       0.92      0.92      0.92     10494\nmacro avg       0.92      0.92      0.92     10494\n```\n\n### Portuguese\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      LOC       0.90      0.91      0.91      4819\n      PER       0.94      0.92      0.93      4184\n      ORG       0.84      0.88      0.86      3670\n\nmicro avg       0.89      0.91      0.90     12673\nmacro avg       0.90      0.91      0.90     12673\n```\n\n### Russian\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      PER       0.93      0.96      0.95      3574\n      LOC       0.87      0.89      0.88      4619\n      ORG       0.82      0.80      0.81      3858\n\nmicro avg       0.87      0.88      0.88     12051\nmacro avg       0.87      0.88      0.88     12051\n```\n\n### Spanish\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      PER       0.95      0.93      0.94      3891\n      ORG       0.86      0.88      0.87      3709\n      LOC       0.89      0.91      0.90      4553\n\nmicro avg       0.90      0.91      0.90     12153\nmacro avg       0.90      0.91      0.90     12153\n```\n\n### Swahili\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.82      0.85      0.83       349\n      PER       0.95      0.92      0.94       403\n      LOC       0.86      0.89      0.88       450\n\nmicro avg       0.88      0.89      0.88      1202\nmacro avg       0.88      0.89      0.88      1202\n```\n\n### Tagalog\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      LOC       0.90      0.91      0.90       338\n      ORG       0.83      0.91      0.87       339\n      PER       0.96      0.93      0.95       350\n\nmicro avg       0.90      0.92      0.91      1027\nmacro avg       0.90      0.92      0.91      1027\n```\n\n### Tamil\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      PER       0.90      0.92      0.91       392\n      ORG       0.77      0.76      0.76       370\n      LOC       0.78      0.81      0.79       421\n\nmicro avg       0.82      0.83      0.82      1183\nmacro avg       0.82      0.83      0.82      1183\n```\n\n### Telugu\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.67      0.55      0.61       347\n      LOC       0.78      0.87      0.82       453\n      PER       0.73      0.86      0.79       393\n\nmicro avg       0.74      0.77      0.76      1193\nmacro avg       0.73      0.77      0.75      1193\n```\n\n### Thai\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      LOC       0.63      0.76      0.69      3928\n      PER       0.78      0.83      0.80      6537\n      ORG       0.59      0.59      0.59      4257\n\nmicro avg       0.68      0.74      0.71     14722\nmacro avg       0.68      0.74      0.71     14722\n```\n\n### Turkish\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      PER       0.94      0.94      0.94      4337\n      ORG       0.88      0.89      0.88      4094\n      LOC       0.90      0.92      0.91      4929\n\nmicro avg       0.90      0.92      0.91     13360\nmacro avg       0.91      0.92      0.91     13360\n```\n\n### Urdu\nNumber of documents: 1000\n```\n           precision    recall  f1-score   support\n\n      LOC       0.90      0.95      0.93       352\n      PER       0.96      0.96      0.96       333\n      ORG       0.91      0.90      0.90       326\n\nmicro avg       0.92      0.94      0.93      1011\nmacro avg       0.92      0.94      0.93      1011\n```\n\n### Vietnamese\nNumber of documents: 10000\n```\n           precision    recall  f1-score   support\n\n      ORG       0.86      0.87      0.86      3579\n      LOC       0.88      0.91      0.90      3811\n      PER       0.92      0.93      0.93      3717\n\nmicro avg       0.89      0.90      0.90     11107\nmacro avg       0.89      0.90      0.90     11107\n```\n\n### Yoruba\nNumber of documents: 100\n```\n           precision    recall  f1-score   support\n\n      LOC       0.54      0.72      0.62        36\n      ORG       0.58      0.31      0.41        35\n      PER       0.77      1.00      0.87        36\n\nmicro avg       0.64      0.68      0.66       107\nmacro avg       0.63      0.68      0.63       107\n```\n\n## Reproduce the results\nDownload and prepare the dataset from the [XTREME repo](https://github.com/google-research/xtreme#download-the-data). Next, from the root of the transformers repo run:\n```\ncd examples/ner\npython run_tf_ner.py \\\n--data_dir . \\\n--labels ./labels.txt \\\n--model_name_or_path jplu/tf-xlm-roberta-base \\\n--output_dir model \\\n--max-seq-length 128 \\\n--num_train_epochs 2 \\\n--per_gpu_train_batch_size 16 \\\n--per_gpu_eval_batch_size 32 \\\n--do_train \\\n--do_eval \\\n--logging_dir logs \\\n--mode token-classification \\\n--evaluate_during_training \\\n--optimizer_name adamw\n```\n\n## Usage with pipelines\n```python\nfrom transformers import pipeline\n\nnlp_ner = pipeline(\n    \"ner\",\n    model=\"jplu/tf-xlm-r-ner-40-lang\",\n    tokenizer=(\n        'jplu/tf-xlm-r-ner-40-lang',  \n        {\"use_fast\": True}),\n    framework=\"tf\"\n)\n\ntext_fr = \"Barack Obama est n\u00e9 \u00e0 Hawa\u00ef.\"\ntext_en = \"Barack Obama was born in Hawaii.\"\ntext_es = \"Barack Obama naci\u00f3 en Hawai.\"\ntext_zh = \"\u5df4\u62c9\u514b\u00b7\u5967\u5df4\u99ac\uff08Barack Obama\uff09\u51fa\u751f\u65bc\u590f\u5a01\u5937\u3002\"\ntext_ar = \"\u0648\u0644\u062f \u0628\u0627\u0631\u0627\u0643 \u0623\u0648\u0628\u0627\u0645\u0627 \u0641\u064a \u0647\u0627\u0648\u0627\u064a.\"\n\nnlp_ner(text_fr)\n#Output: [{'word': '\u2581Barack', 'score': 0.9894659519195557, 'entity': 'PER'}, {'word': '\u2581Obama', 'score': 0.9888848662376404, 'entity': 'PER'}, {'word': '\u2581Hawa', 'score': 0.998701810836792, 'entity': 'LOC'}, {'word': '\u00ef', 'score': 0.9987035989761353, 'entity': 'LOC'}]\nnlp_ner(text_en)\n#Output: [{'word': '\u2581Barack', 'score': 0.9929141998291016, 'entity': 'PER'}, {'word': '\u2581Obama', 'score': 0.9930834174156189, 'entity': 'PER'}, {'word': '\u2581Hawaii', 'score': 0.9986202120780945, 'entity': 'LOC'}]\nnlp_ner(test_es)\n#Output: [{'word': '\u2581Barack', 'score': 0.9944776296615601, 'entity': 'PER'}, {'word': '\u2581Obama', 'score': 0.9949177503585815, 'entity': 'PER'}, {'word': '\u2581Hawa', 'score': 0.9987911581993103, 'entity': 'LOC'}, {'word': 'i', 'score': 0.9984861612319946, 'entity': 'LOC'}]\nnlp_ner(test_zh)\n#Output: [{'word': '\u590f\u5a01\u5937', 'score': 0.9988449215888977, 'entity': 'LOC'}]\nnlp_ner(test_ar)\n#Output: [{'word': '\u2581\u0628\u0627', 'score': 0.9903655648231506, 'entity': 'PER'}, {'word': '\u0631\u0627\u0643', 'score': 0.9850614666938782, 'entity': 'PER'}, {'word': '\u2581\u0623\u0648\u0628\u0627\u0645\u0627', 'score': 0.9850308299064636, 'entity': 'PER'}, {'word': '\u2581\u0647\u0627', 'score': 0.9477543234825134, 'entity': 'LOC'}, {'word': '\u0648\u0627', 'score': 0.9428229928016663, 'entity': 'LOC'}, {'word': '\u064a', 'score': 0.9319471716880798, 'entity': 'LOC'}]\n\n```\n"}
{"downloads": 10892, "id": "microsoft/Multilingual-MiniLM-L12-H384", "likes": 32, "pipeline_tag": "text-classification", "task": "text-classification", "meta": {"language": ["multilingual", "en", "ar", "bg", "de", "el", "es", "fr", "hi", "ru", "sw", "th", "tr", "ur", "vi", "zh"], "thumbnail": "https://huggingface.co/front/thumbnails/microsoft.png", "tags": ["text-classification"], "license": "mit"}, "description": "\n\n## MiniLM: Small and Fast Pre-trained Models for Language Understanding and Generation\n\nMiniLM is a distilled model from the paper \"[MiniLM: Deep Self-Attention Distillation for Task-Agnostic Compression of Pre-Trained Transformers](https://arxiv.org/abs/2002.10957)\".\n\nPlease find the information about preprocessing, training and full details of the MiniLM in the [original MiniLM repository](https://github.com/microsoft/unilm/blob/master/minilm/).\n\nPlease note: This checkpoint uses `BertModel` with `XLMRobertaTokenizer` so `AutoTokenizer` won't work with this checkpoint!\n\n### Multilingual Pretrained Model\n- Multilingual-MiniLMv1-L12-H384: 12-layer, 384-hidden, 12-heads, 21M Transformer parameters, 96M embedding parameters\n\nMultilingual MiniLM uses the same tokenizer as XLM-R. But the Transformer architecture of our model is the same as BERT. We provide the fine-tuning code on XNLI based on [huggingface/transformers](https://github.com/huggingface/transformers). Please replace `run_xnli.py` in transformers with [ours](https://github.com/microsoft/unilm/blob/master/minilm/examples/run_xnli.py) to fine-tune multilingual MiniLM.  \n\nWe evaluate the multilingual MiniLM on cross-lingual natural language inference benchmark (XNLI) and cross-lingual question answering benchmark (MLQA).\n\n#### Cross-Lingual Natural Language Inference - [XNLI](https://arxiv.org/abs/1809.05053)\n\nWe evaluate our model on cross-lingual transfer from English to other languages. Following [Conneau et al. (2019)](https://arxiv.org/abs/1911.02116), we select the best single model on the joint dev set of all the languages.\n\n| Model                                                                                       | #Layers | #Hidden | #Transformer Parameters | Average | en   | fr   | es   | de   | el   | bg   | ru   | tr   | ar   | vi   | th   | zh   | hi   | sw   | ur   |\n|"}
{"downloads": 230908, "id": "sentence-transformers/distiluse-base-multilingual-cased-v1", "likes": 23, "pipeline_tag": "sentence-similarity", "task": "sentence-similarity", "meta": {"pipeline_tag": "sentence-similarity", "language": "multilingual", "license": "apache-2.0", "tags": ["sentence-transformers", "feature-extraction", "sentence-similarity", "transformers"]}, "description": "\n\n# sentence-transformers/distiluse-base-multilingual-cased-v1\n\nThis is a [sentence-transformers](https://www.SBERT.net) model: It maps sentences & paragraphs to a 512 dimensional dense vector space and can be used for tasks like clustering or semantic search.\n\n\n\n## Usage (Sentence-Transformers)\n\nUsing this model becomes easy when you have [sentence-transformers](https://www.SBERT.net) installed:\n\n```\npip install -U sentence-transformers\n```\n\nThen you can use the model like this:\n\n```python\nfrom sentence_transformers import SentenceTransformer\nsentences = [\"This is an example sentence\", \"Each sentence is converted\"]\n\nmodel = SentenceTransformer('sentence-transformers/distiluse-base-multilingual-cased-v1')\nembeddings = model.encode(sentences)\nprint(embeddings)\n```\n\n\n\n## Evaluation Results\n\n\n\nFor an automated evaluation of this model, see the *Sentence Embeddings Benchmark*: [https://seb.sbert.net](https://seb.sbert.net?model_name=sentence-transformers/distiluse-base-multilingual-cased-v1)\n\n\n\n## Full Model Architecture\n```\nSentenceTransformer(\n  (0): Transformer({'max_seq_length': 128, 'do_lower_case': False}) with Transformer model: DistilBertModel \n  (1): Pooling({'word_embedding_dimension': 768, 'pooling_mode_cls_token': False, 'pooling_mode_mean_tokens': True, 'pooling_mode_max_tokens': False, 'pooling_mode_mean_sqrt_len_tokens': False})\n  (2): Dense({'in_features': 768, 'out_features': 512, 'bias': True, 'activation_function': 'torch.nn.modules.activation.Tanh'})\n)\n```\n\n## Citing & Authors\n\nThis model was trained by [sentence-transformers](https://www.sbert.net/). \n        \nIf you find this model helpful, feel free to cite our publication [Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks](https://arxiv.org/abs/1908.10084):\n```bibtex \n@inproceedings{reimers-2019-sentence-bert,\n    title = \"Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks\",\n    author = \"Reimers, Nils and Gurevych, Iryna\",\n    booktitle = \"Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing\",\n    month = \"11\",\n    year = \"2019\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"http://arxiv.org/abs/1908.10084\",\n}\n```"}
{"downloads": 807, "id": "speechbrain/lang-id-commonlanguage_ecapa", "likes": 20, "pipeline_tag": "audio-classification", "task": "audio-classification", "meta": {"language": ["ar", "eu", "br", "ca", "cv", "cs", "dv", "nl", "en", "eo", "et", "fr", "fy", "ka", "de", "el", "cnh", "id", "ia", "it", "ja", "kab", "rw", "ky", "lv", "mt", "mn", "fa", "pl", "pt", "ro", "rm", "ru", "sah", "sl", "es", "sv", "ta", "tt", "tr", "uk", "cy"], "language_bcp47": ["zh-CH", "zh-HK", "zh-TW"], "thumbnail": null, "tags": ["audio-classification", "speechbrain", "embeddings", "Language", "Identification", "pytorch", "ECAPA-TDNN", "TDNN", "CommonLanguage"], "license": "apache-2.0", "datasets": ["Urbansound8k"], "metrics": ["Accuracy"], "widget": [{"example_title": "English Sample", "src": "https://cdn-media.huggingface.co/speech_samples/LibriSpeech_61-70968-0000.flac"}]}, "description": "\n\n\n<iframe src=\"https://ghbtns.com/github-btn.html?user=speechbrain&repo=speechbrain&type=star&count=true&size=large&v=2\" frameborder=\"0\" scrolling=\"0\" width=\"170\" height=\"30\" title=\"GitHub\"></iframe>\n<br/><br/>\n\n# Language Identification from Speech Recordings with ECAPA embeddings on CommonLanguage\n\nThis repository provides all the necessary tools to perform language identification from speech recordings with SpeechBrain.\nThe system uses a model pretrained on the CommonLanguage dataset (45 languages).\nYou can download the dataset [here](https://zenodo.org/record/5036977#.YNzDbXVKg5k)\nThe provided system can recognize the following 45 languages from short speech recordings:\n\n```\nArabic, Basque, Breton, Catalan, Chinese_China, Chinese_Hongkong, Chinese_Taiwan, Chuvash, Czech, Dhivehi, Dutch, English, Esperanto, Estonian, French, Frisian, Georgian, German, Greek, Hakha_Chin, Indonesian, Interlingua, Italian, Japanese, Kabyle, Kinyarwanda, Kyrgyz, Latvian, Maltese, Mongolian, Persian, Polish, Portuguese, Romanian, Romansh_Sursilvan, Russian, Sakha, Slovenian, Spanish, Swedish, Tamil, Tatar, Turkish, Ukrainian, Welsh\n```\n\nFor a better experience, we encourage you to learn more about\n[SpeechBrain](https://speechbrain.github.io). The given model performance on the test set is:\n\n| Release | Accuracy (%)\n|:"}
{"downloads": 4935, "id": "symanto/sn-xlm-roberta-base-snli-mnli-anli-xnli", "likes": 35, "pipeline_tag": "sentence-similarity", "task": "sentence-similarity", "meta": {"language": ["ar", "bg", "de", "el", "en", "es", "fr", "ru", "th", "tr", "ur", "vn", "zh"], "datasets": ["SNLI", "MNLI", "ANLI", "XNLI"], "pipeline_tag": "sentence-similarity", "tags": ["zero-shot-classification", "sentence-transformers", "feature-extraction", "sentence-similarity", "transformers"]}, "description": "\n\nA Siamese network model trained for zero-shot and few-shot text classification.\n\nThe base model is [xlm-roberta-base](https://huggingface.co/xlm-roberta-base).\nIt was trained on [SNLI](https://nlp.stanford.edu/projects/snli/), [MNLI](https://cims.nyu.edu/~sbowman/multinli/), [ANLI](https://github.com/facebookresearch/anli) and [XNLI](https://github.com/facebookresearch/XNLI).\n\nThis is a [sentence-transformers](https://www.SBERT.net) model: It maps sentences & paragraphs to a 768 dimensional dense vector space.\n\n## Usage (Sentence-Transformers)\n\nUsing this model becomes easy when you have [sentence-transformers](https://www.SBERT.net) installed:\n\n```\npip install -U sentence-transformers\n```\n\nThen you can use the model like this:\n\n```python\nfrom sentence_transformers import SentenceTransformer\nsentences = [\"This is an example sentence\", \"Each sentence is converted\"]\n\nmodel = SentenceTransformer('{MODEL_NAME}')\nembeddings = model.encode(sentences)\nprint(embeddings)\n```\n\n\n## Usage (HuggingFace Transformers)\nWithout [sentence-transformers](https://www.SBERT.net), you can use the model like this: First, you pass your input through the transformer model, then you have to apply the right pooling-operation on-top of the contextualized word embeddings.\n\n```python\nfrom transformers import AutoTokenizer, AutoModel\nimport torch\n\n\n#Mean Pooling - Take attention mask into account for correct averaging\ndef mean_pooling(model_output, attention_mask):\n    token_embeddings = model_output[0] #First element of model_output contains all token embeddings\n    input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()\n    return torch.sum(token_embeddings * input_mask_expanded, 1) / torch.clamp(input_mask_expanded.sum(1), min=1e-9)\n\n\n# Sentences we want sentence embeddings for\nsentences = ['This is an example sentence', 'Each sentence is converted']\n\n# Load model from HuggingFace Hub\ntokenizer = AutoTokenizer.from_pretrained('{MODEL_NAME}')\nmodel = AutoModel.from_pretrained('{MODEL_NAME}')\n\n# Tokenize sentences\nencoded_input = tokenizer(sentences, padding=True, truncation=True, return_tensors='pt')\n\n# Compute token embeddings\nwith torch.no_grad():\n    model_output = model(**encoded_input)\n\n# Perform pooling. In this case, mean pooling.\nsentence_embeddings = mean_pooling(model_output, encoded_input['attention_mask'])\n\nprint(\"Sentence embeddings:\")\nprint(sentence_embeddings)\n```\n"}
{"downloads": 287758, "id": "bigscience/bloom-560m", "likes": 105, "pipeline_tag": "text-generation", "task": "text-generation", "meta": {"license": "bigscience-bloom-rail-1.0", "language": ["ak", "ar", "as", "bm", "bn", "ca", "code", "en", "es", "eu", "fon", "fr", "gu", "hi", "id", "ig", "ki", "kn", "lg", "ln", "ml", "mr", "ne", "nso", "ny", "or", "pa", "pt", "rn", "rw", "sn", "st", "sw", "ta", "te", "tn", "ts", "tum", "tw", "ur", "vi", "wo", "xh", "yo", "zh", "zhs", "zht", "zu"], "pipeline_tag": "text-generation"}, "description": "\n\n<h1 style='text-align: center '>BLOOM LM</h1> \n<h2 style='text-align: center '><em>BigScience Large Open-science Open-access Multilingual Language Model</em> </h2> \n<h3 style='text-align: center '>Model Card</h3>\n<img src=\"https://s3.amazonaws.com/moonup/production/uploads/1657124309515-5f17f0a0925b9863e28ad517.png\" alt=\"BigScience Logo\" width=\"800\" style=\"margin-left:'auto' margin-right:'auto' display:'block'\"/>\n\nVersion 1.0 / 26.May.2022\n\n## Table of Contents\n1. [Model Details](#model-details)\n2. [Uses](#uses)\n3. [Training Data](#training-data)\n4. [Risks and Limitations](#risks-and-limitations)\n5. [Evaluation](#evaluation)\n6. [Recommendations](#recommendations)\n7. [Glossary and Calculations](#glossary-and-calculations)\n8. [More Information](#more-information)\n9. [Model Card Authors](#model-card-authors)\n\n## Model Details  \n\n### Basics\n*This section provides information for anyone who wants to know about the model.*\n\n<details>\n<summary>Click to expand</summary> <br/>\n    \n**Developed by:** BigScience ([website](https://bigscience.huggingface.co))\n\n* All collaborators are either volunteers or have an agreement with their employer. *(Further breakdown of participants forthcoming.)*\n    \n**Model Type:** Transformer-based Language Model\n\n**Version:** 1.0.0\n\n**Languages:** Multiple; see [training data](#training-data)\n\n**License:** RAIL License v1.0 ([link](https://huggingface.co/spaces/bigscience/license))\n\n**Release Date Estimate:** Monday, 11.July.2022\n\n**Send Questions to:** bigscience-contact@googlegroups.com\n\n**Cite as:** BigScience, _BigScience Language Open-science Open-access Multilingual (BLOOM) Language Model_. International, May 2021-May 2022\n\n**Funded by:** \n    \n* The French government.\n\n* Hugging Face ([website](https://huggingface.co)).\n\n* Organizations of contributors.  *(Further breakdown of organizations forthcoming.)*\n\n</details>\n\n### Technical Specifications\n*This section provides information for people who work on model development.*\n\n<details>\n<summary>Click to expand</summary><br/>\n\nPlease see [the BLOOM training README](https://github.com/bigscience-workshop/bigscience/tree/master/train/tr11-176B-ml#readme) for full details on replicating training.\n\n**Model Architecture:** Modified from Megatron-LM GPT2 (see [paper](https://arxiv.org/abs/1909.08053), [BLOOM Megatron code](https://github.com/bigscience-workshop/Megatron-DeepSpeed)):\n\n* Decoder-only architecture\n\n* Layer normalization applied to word embeddings layer (`StableEmbedding`; see [code](https://github.com/facebookresearch/bitsandbytes), [paper](https://arxiv.org/pdf/2110.02861.pdf))\n\n* ALiBI positional encodings (see [paper](https://arxiv.org/pdf/2108.12409.pdf)), with GeLU activation functions\n\n* 559,214,592 parameters:\n\n    * 256,901,120 embedding parameters\n\n    * 24 layers, 16 attention heads\n\n    * Hidden layers are 1024-dimensional\n\n    * Sequence length of 2048 tokens (see [BLOOM tokenizer](https://huggingface.co/bigscience/tokenizer), [tokenizer description](#tokenization))\n\n**Objective Function:** Cross Entropy with mean reduction (see [API documentation](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss)).\n    \n**Compute infrastructure:** Jean Zay Public Supercomputer, provided by the French government (see [announcement](https://www.enseignementsup-recherche.gouv.fr/fr/signature-du-marche-d-acquisition-de-l-un-des-supercalculateurs-les-plus-puissants-d-europe-46733)).\n\n* Hardware: 384 A100 80GB GPUs (48 nodes):\n    \n    * Additional 32 A100 80GB GPUs (4 nodes) in reserve\n\n    *  8 GPUs per node Using NVLink 4 inter-gpu connects, 4 OmniPath links\n\n    *   CPU: AMD\n\n    *   CPU memory: 512GB per node\n\n    *   GPU memory: 640GB per node\n\n    *   Inter-node connect: Omni-Path Architecture (OPA)\n\n    *   NCCL-communications network: a fully dedicated subnet\n\n    *   Disc IO network: shared network with other types of nodes\n\n* Software:\n  \n    *   Megatron-DeepSpeed ([Github link](https://github.com/bigscience-workshop/Megatron-DeepSpeed))\n\n    *   DeepSpeed ([Github link](https://github.com/microsoft/DeepSpeed))\n\n    *   PyTorch (pytorch-1.11 w/ CUDA-11.5; see [Github link](https://github.com/pytorch/pytorch))\n\n    *   apex ([Github link](https://github.com/NVIDIA/apex))\n\n\n#### **Training**\n\nTraining logs: [Tensorboard link](https://huggingface.co/bigscience/tr11e-350M-logs)\n\n- Training throughput: About 150 TFLOPs per GPU\n\n- Number of epochs: 1 (*current target*)\n\n- Dates:\n    \n    - Started 11th March, 2022 11:42am PST\n\n    - Ended 5th July, 2022\n\n- Estimated cost of training: Equivalent of $2-5M in cloud computing (including preliminary experiments and other model sizes)\n\n- Server training location: \u00cele-de-France, France\n\n#### **Tokenization**\n    \nThe BLOOM tokenizer ([link](https://huggingface.co/bigscience/tokenizer)) is a learned subword tokenizer trained using:\n    \n- A byte-level Byte Pair Encoding (BPE) algorithm \n\n- A simple pre-tokenization rule, no normalization\n\n- A vocabulary size of 250,680\n\nIt was trained on a subset of a preliminary version of the corpus using alpha-weighting per language.    \n    \n</details>\n\n\n### Environmental Impact\n\n<details>\n<summary>Click to expand</summary><br/>\n\nThe training supercomputer, Jean Zay ([website](http://www.idris.fr/eng/jean-zay/jean-zay-presentation-eng.html)), uses mostly nuclear energy. The heat generated by it is reused for heating campus housing.\n    \n**Estimated carbon emissions:**  *(Forthcoming upon completion of training.)*\n    \n**Estimated electricity usage:** *(Forthcoming upon completion of training.)*\n\n\n</details>\n<p>&nbsp;</p>\n\n## Uses\n\n*This section addresses questions around how the model is intended to be used, discusses the foreseeable users of the model (including those affected by the model), and describes uses that are considered out of scope or misuse of the model. \nIt provides information for anyone considering using the model or who is affected by the model.*\n\n\n<details>\n<summary>Click to expand</summary><br/>\n    \n### Intended Use\n\nThis model is being created in order to enable public research on large language models (LLMs). LLMs are intended to be used for language generation or as a pretrained base model that can be further fine-tuned for specific tasks. Use cases below are not exhaustive.\n\n#### **Direct Use**\n\n-   Text generation\n\n-   Exploring characteristics of language generated by a language model\n\n    -   Examples: Cloze tests, counterfactuals, generations with reframings\n\n#### **Downstream Use**\n\n-   Tasks that leverage language models include: Information Extraction, Question Answering, Summarization\n\n### Misuse and Out-of-scope Use\n*This section addresses what users ought not do with the model.*\n\nSee the [BLOOM License](https://huggingface.co/spaces/bigscience/license), Attachment A, for detailed usage restrictions. The below list is non-exhaustive, but lists some easily foreseeable problematic use cases.\n\n#### **Out-of-scope Uses**\n\nUsing the model in [high-stakes](#high-stakes) settings is out of scope for this model.\u00a0 The model is not designed for [critical decisions](#critical-decisions) nor uses with any material consequences on an individual's livelihood or wellbeing. The model outputs content that appears factual but is not correct.  \n\n##### Out-of-scope Uses Include:\n\n-   Usage in biomedical domains, political and legal domains, or finance domains\n\n-   Usage for evaluating or scoring individuals, such as for employment, education, or credit\n\n-   Applying the model for critical automatic decisions, generating factual content, creating reliable summaries, or generating predictions that must be correct\n\n#### **Misuse**\n\nIntentionally using the model for harm, violating [human rights](#human-rights), or other kinds of malicious activities, is a misuse of this model. This includes:\n\n-   Spam generation\n\n-   Disinformation and influence operations\n\n-   Disparagement and defamation\n\n-   Harassment and abuse\n  \n-   [Deception](#deception)\n\n-   Unconsented impersonation and imitation\n\n-   Unconsented surveillance \n\n-   Generating content without attribution to the model, as specified in the [RAIL License, Use Restrictions](https://huggingface.co/spaces/bigscience/license)\n\n### Intended Users\n\n#### **Direct Users**\n\n-   General Public\n\n-   Researchers\n\n-   Students\n\n-   Educators\n\n-   Engineers/developers\n\n-   Non-commercial entities\n\n-   Community advocates, including human and civil rights groups\n\n#### Indirect Users\n\n-   Users of derivatives created by Direct Users, such as those using software with an [intended use](#intended-use)\n\n-   Users of [Derivatives of the Model, as described in the License](https://huggingface.co/spaces/bigscience/license)\n\n#### Others Affected (Parties Prenantes)\n\n-   People and groups referred to by the LLM\n\n-   People and groups exposed to outputs of, or decisions based on, the LLM\n\n-   People and groups whose original work is included in the LLM\n    \n</details>\n<p>&nbsp;</p>\n\n## Training Data\n*This section provides a high-level overview of the training data. It is relevant for anyone who wants to know the basics of what the model is learning.*\n\n\n<details>\n<summary>Click to expand</summary><br/>\n    \nDetails for each dataset are provided in individual [Data Cards](https://huggingface.co/spaces/bigscience/BigScienceCorpus).\n\nTraining data includes:\n\n-   45 natural languages\n    \n-   12 programming languages\n\n-   In 1.5TB of pre-processed text, converted into 350B unique tokens (see [the tokenizer section](#tokenization) for more.)\n\n\n#### **Languages**\n    \nThe pie chart shows the distribution of languages in training data.\n   \n![pie chart showing the distribution of languages in training data](https://github.com/bigscience-workshop/model_card/blob/main/assets/data/pie_chart.svg?raw=true)\n\n\nThe following table shows the further distribution of Niger-Congo and Indic languages in the training data.\n<details>\n<summary>Click to expand</summary><br/>\n    \n| Niger Congo    | Percentage |         | Indic     | Percentage |\n|"}
{"downloads": 43019, "id": "facebook/nllb-200-distilled-1.3B", "likes": 20, "pipeline_tag": "translation", "task": "translation", "meta": {"language": ["ace", "acm", "acq", "aeb", "af", "ajp", "ak", "als", "am", "apc", "ar", "ars", "ary", "arz", "as", "ast", "awa", "ayr", "azb", "azj", "ba", "bm", "ban", "be", "bem", "bn", "bho", "bjn", "bo", "bs", "bug", "bg", "ca", "ceb", "cs", "cjk", "ckb", "crh", "cy", "da", "de", "dik", "dyu", "dz", "el", "en", "eo", "et", "eu", "ee", "fo", "fj", "fi", "fon", "fr", "fur", "fuv", "gaz", "gd", "ga", "gl", "gn", "gu", "ht", "ha", "he", "hi", "hne", "hr", "hu", "hy", "ig", "ilo", "id", "is", "it", "jv", "ja", "kab", "kac", "kam", "kn", "ks", "ka", "kk", "kbp", "kea", "khk", "km", "ki", "rw", "ky", "kmb", "kmr", "knc", "kg", "ko", "lo", "lij", "li", "ln", "lt", "lmo", "ltg", "lb", "lua", "lg", "luo", "lus", "lvs", "mag", "mai", "ml", "mar", "min", "mk", "mt", "mni", "mos", "mi", "my", "nl", "nn", "nb", "npi", "nso", "nus", "ny", "oc", "ory", "pag", "pa", "pap", "pbt", "pes", "plt", "pl", "pt", "prs", "quy", "ro", "rn", "ru", "sg", "sa", "sat", "scn", "shn", "si", "sk", "sl", "sm", "sn", "sd", "so", "st", "es", "sc", "sr", "ss", "su", "sv", "swh", "szl", "ta", "taq", "tt", "te", "tg", "tl", "th", "ti", "tpi", "tn", "ts", "tk", "tum", "tr", "tw", "tzm", "ug", "uk", "umb", "ur", "uzn", "vec", "vi", "war", "wo", "xh", "ydd", "yo", "yue", "zh", "zsm", "zu"], "language_details": "ace_Arab, ace_Latn, acm_Arab, acq_Arab, aeb_Arab, afr_Latn, ajp_Arab, aka_Latn, amh_Ethi, apc_Arab, arb_Arab, ars_Arab, ary_Arab, arz_Arab, asm_Beng, ast_Latn, awa_Deva, ayr_Latn, azb_Arab, azj_Latn, bak_Cyrl, bam_Latn, ban_Latn,bel_Cyrl, bem_Latn, ben_Beng, bho_Deva, bjn_Arab, bjn_Latn, bod_Tibt, bos_Latn, bug_Latn, bul_Cyrl, cat_Latn, ceb_Latn, ces_Latn, cjk_Latn, ckb_Arab, crh_Latn, cym_Latn, dan_Latn, deu_Latn, dik_Latn, dyu_Latn, dzo_Tibt, ell_Grek, eng_Latn, epo_Latn, est_Latn, eus_Latn, ewe_Latn, fao_Latn, pes_Arab, fij_Latn, fin_Latn, fon_Latn, fra_Latn, fur_Latn, fuv_Latn, gla_Latn, gle_Latn, glg_Latn, grn_Latn, guj_Gujr, hat_Latn, hau_Latn, heb_Hebr, hin_Deva, hne_Deva, hrv_Latn, hun_Latn, hye_Armn, ibo_Latn, ilo_Latn, ind_Latn, isl_Latn, ita_Latn, jav_Latn, jpn_Jpan, kab_Latn, kac_Latn, kam_Latn, kan_Knda, kas_Arab, kas_Deva, kat_Geor, knc_Arab, knc_Latn, kaz_Cyrl, kbp_Latn, kea_Latn, khm_Khmr, kik_Latn, kin_Latn, kir_Cyrl, kmb_Latn, kon_Latn, kor_Hang, kmr_Latn, lao_Laoo, lvs_Latn, lij_Latn, lim_Latn, lin_Latn, lit_Latn, lmo_Latn, ltg_Latn, ltz_Latn, lua_Latn, lug_Latn, luo_Latn, lus_Latn, mag_Deva, mai_Deva, mal_Mlym, mar_Deva, min_Latn, mkd_Cyrl, plt_Latn, mlt_Latn, mni_Beng, khk_Cyrl, mos_Latn, mri_Latn, zsm_Latn, mya_Mymr, nld_Latn, nno_Latn, nob_Latn, npi_Deva, nso_Latn, nus_Latn, nya_Latn, oci_Latn, gaz_Latn, ory_Orya, pag_Latn, pan_Guru, pap_Latn, pol_Latn, por_Latn, prs_Arab, pbt_Arab, quy_Latn, ron_Latn, run_Latn, rus_Cyrl, sag_Latn, san_Deva, sat_Beng, scn_Latn, shn_Mymr, sin_Sinh, slk_Latn, slv_Latn, smo_Latn, sna_Latn, snd_Arab, som_Latn, sot_Latn, spa_Latn, als_Latn, srd_Latn, srp_Cyrl, ssw_Latn, sun_Latn, swe_Latn, swh_Latn, szl_Latn, tam_Taml, tat_Cyrl, tel_Telu, tgk_Cyrl, tgl_Latn, tha_Thai, tir_Ethi, taq_Latn, taq_Tfng, tpi_Latn, tsn_Latn, tso_Latn, tuk_Latn, tum_Latn, tur_Latn, twi_Latn, tzm_Tfng, uig_Arab, ukr_Cyrl, umb_Latn, urd_Arab, uzn_Latn, vec_Latn, vie_Latn, war_Latn, wol_Latn, xho_Latn, ydd_Hebr, yor_Latn, yue_Hant, zho_Hans, zho_Hant, zul_Latn", "tags": ["nllb", "translation"], "license": "cc-by-nc-4.0", "datasets": ["flores-200"], "metrics": ["bleu", "spbleu", "chrf++"], "inference": false}, "description": "\n\n# NLLB-200\n\nThis is the model card of NLLB-200's distilled 1.3B variant.\n\nHere are the [metrics](https://tinyurl.com/nllb200densedst1bmetrics) for that particular checkpoint.\n\n- Information about training algorithms, parameters, fairness constraints or other applied approaches, and features. The exact training algorithm, data and the strategies to handle data imbalances for high and low resource languages that were used to train NLLB-200 is described in the paper.\n- Paper or other resource for more information NLLB Team et al, No Language Left Behind: Scaling Human-Centered Machine Translation, Arxiv, 2022\n- License: CC-BY-NC\n- Where to send questions or comments about the model: https://github.com/facebookresearch/fairseq/issues\n\n\n\n## Intended Use\n- Primary intended uses: NLLB-200 is a machine translation model primarily intended for research in machine translation, - especially for low-resource languages. It allows for single sentence translation among 200 languages. Information on how to - use the model can be found in Fairseq code repository along with the training code and references to evaluation and training data.\n- Primary intended users: Primary users are researchers and machine translation research community.\n- Out-of-scope use cases: NLLB-200 is a research model and is not released for production deployment. NLLB-200 is trained on general domain text data and is not intended to be used with domain specific texts, such as medical domain or legal domain. The model is not intended to be used for document translation. The model was trained with input lengths not exceeding 512 tokens, therefore translating longer sequences might result in quality degradation. NLLB-200 translations can not be used as certified translations. \n\n## Metrics\n\u2022 Model performance measures: NLLB-200 model was evaluated using BLEU, spBLEU, and chrF++ metrics widely adopted by machine translation community. Additionally, we performed human evaluation with the XSTS protocol and measured the toxicity of the generated translations.\n\n\n## Evaluation Data\n- Datasets: Flores-200 dataset is described in Section 4\n- Motivation: We used Flores-200 as it provides full evaluation coverage of the languages in NLLB-200\n- Preprocessing: Sentence-split raw text data was preprocessed using SentencePiece. The\nSentencePiece model is released along with NLLB-200.\n\n## Training Data\n\u2022 We used parallel multilingual data from a variety of sources to train the model. We provide detailed report on data selection and construction process in Section 5 in the paper. We also used monolingual data constructed from Common Crawl. We provide more details in Section 5.2.\n\n## Ethical Considerations\n\u2022 In this work, we took a reflexive approach in technological development to ensure that we prioritize human users and minimize risks that could be transferred to them. While we reflect on our ethical considerations throughout the article, here are some additional points to highlight. For one, many languages chosen for this study are low-resource languages, with a heavy emphasis on African languages. While quality translation could improve education and information access in many in these communities, such an access could also make groups with lower levels of digital literacy more vulnerable to misinformation or online scams. The latter scenarios could arise if bad actors misappropriate our work for nefarious activities, which we conceive as an example of unintended use. Regarding data acquisition, the training data used for model development were mined from various publicly available sources on the web. Although we invested heavily in data cleaning, personally identifiable information may not be entirely eliminated. Finally, although we did our best to optimize for translation quality, mistranslations produced by the model could remain. Although the odds are low, this could have adverse impact on those who rely on these translations to make important decisions (particularly when related to health and safety).\n\n## Caveats and Recommendations\n\u2022 Our model has been tested on the Wikimedia domain with limited investigation on other domains supported in NLLB-MD. In addition, the supported languages may have variations that our model is not capturing. Users should make appropriate assessments.\n\n## Carbon Footprint Details\n\u2022 The carbon dioxide (CO2e) estimate is reported in Section 8.8."}
{"downloads": 12956, "id": "openai/whisper-large", "likes": 240, "pipeline_tag": "automatic-speech-recognition", "task": "automatic-speech-recognition", "meta": {"language": ["en", "zh", "de", "es", "ru", "ko", "fr", "ja", "pt", "tr", "pl", "ca", "nl", "ar", "sv", "it", "id", "hi", "fi", "vi", "he", "uk", "el", "ms", "cs", "ro", "da", "hu", "ta", false, "th", "ur", "hr", "bg", "lt", "la", "mi", "ml", "cy", "sk", "te", "fa", "lv", "bn", "sr", "az", "sl", "kn", "et", "mk", "br", "eu", "is", "hy", "ne", "mn", "bs", "kk", "sq", "sw", "gl", "mr", "pa", "si", "km", "sn", "yo", "so", "af", "oc", "ka", "be", "tg", "sd", "gu", "am", "yi", "lo", "uz", "fo", "ht", "ps", "tk", "nn", "mt", "sa", "lb", "my", "bo", "tl", "mg", "as", "tt", "haw", "ln", "ha", "ba", "jw", "su"], "tags": ["audio", "automatic-speech-recognition", "hf-asr-leaderboard"], "widget": [{"example_title": "Librispeech sample 1", "src": "https://cdn-media.huggingface.co/speech_samples/sample1.flac"}, {"example_title": "Librispeech sample 2", "src": "https://cdn-media.huggingface.co/speech_samples/sample2.flac"}], "model-index": [{"name": "whisper-large", "results": [{"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "LibriSpeech (clean)", "type": "librispeech_asr", "config": "clean", "split": "test", "args": {"language": "en"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 3.0}]}, {"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "LibriSpeech (other)", "type": "librispeech_asr", "config": "other", "split": "test", "args": {"language": "en"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 5.4}]}, {"task": {"name": "Automatic Speech Recognition", "type": "automatic-speech-recognition"}, "dataset": {"name": "Common Voice 11.0", "type": "mozilla-foundation/common_voice_11_0", "config": "hi", "split": "test", "args": {"language": "hi"}}, "metrics": [{"name": "Test WER", "type": "wer", "value": 54.8}]}]}], "pipeline_tag": "automatic-speech-recognition", "license": "apache-2.0"}, "description": "\n\n# Whisper\n\nWhisper is a pre-trained model for automatic speech recognition (ASR) and speech translation. Trained on 680k hours \nof labelled data, Whisper models demonstrate a strong ability to generalise to many datasets and domains **without** the need \nfor fine-tuning.\n\nWhisper was proposed in the paper [Robust Speech Recognition via Large-Scale Weak Supervision](https://arxiv.org/abs/2212.04356) \nby Alec Radford et al from OpenAI. The original code repository can be found [here](https://github.com/openai/whisper).\n\n<div class=\"course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400\">\n  <p><b>Update:</b> following the release of the paper, the Whisper authors announced a <a href=\"ttps://huggingface.co/openai/whisper-large-v2\"> large-v2</a> model trained for 2.5x more epochs with regularization. This <a href=\"ttps://huggingface.co/openai/whisper-large-v2\"> large-v2</a> model surpasses the performance of the large model, with no architecture changes. Thus, it is recommended that the <a href=\"ttps://huggingface.co/openai/whisper-large-v2\"> large-v2</a> model is used in-place of the original large model. </p>\n</div>\n\n\n**Disclaimer**: Content for this model card has partly been written by the Hugging Face team, and parts of it were \ncopied and pasted from the original model card.\n\n## Model details\n\nWhisper is a Transformer based encoder-decoder model, also referred to as a _sequence-to-sequence_ model. \nIt was trained on 680k hours of labelled speech data annotated using large-scale weak supervision. \n\nThe models were trained on either English-only data or multilingual data. The English-only models were trained \non the task of speech recognition. The multilingual models were trained on both speech recognition and speech \ntranslation. For speech recognition, the model predicts transcriptions in the *same* language as the audio. \nFor speech translation, the model predicts transcriptions to a *different* language to the audio.\n\nWhisper checkpoints come in five configurations of varying model sizes.\nThe smallest four are trained on either English-only or multilingual data.\nThe largest checkpoints are multilingual only. All ten of the pre-trained checkpoints \nare available on the [Hugging Face Hub](https://huggingface.co/models?search=openai/whisper). The \ncheckpoints are summarised in the following table with links to the models on the Hub:\n\n| Size     | Parameters | English-only                                         | Multilingual                                        |\n|"}